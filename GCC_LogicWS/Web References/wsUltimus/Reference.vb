'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
'
Namespace wsUltimus
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="wsUltimosSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class wsUltimos
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetAssociatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentJobFunctionGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubDepartmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GroupIsMemberOfGroup2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GroupIsMemberOfGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDepartmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllOCMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobFunctionGroupMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTopLevelDepartmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignAllCurrentTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignAllFutureTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExactCaseUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManagerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOCSubOrdinatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubOrdinatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubOrdinatesBySupervisorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSupervisorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSupervisorFunctionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskListViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserPrefsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserRightsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetViewListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserIsMemberOfGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserPrefsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortIncidentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortStepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteIncidentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DirectActivateStepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DirectActivateStepExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIncidentStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGraphicalStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortTaskIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReturnTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignQueueTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignTaskAssignedToUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExtractFormURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTaskVariablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFirstTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrevTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTasksCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadAssignedTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadFilteredTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadQueueTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadViewTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignAllFutureTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignallCurrtaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReassignedTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReassignedTask2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosUltimusIrResolucionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosUltimusNivActualAprobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosUltimusComiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosSupervisorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatosUltimusActualOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.GCC.LogicWS.My.MySettings.Default.GCC_LogicWS_wsUltimus_wsUltimos
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetAssociatesCompleted As GetAssociatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentJobFunctionGroupsCompleted As GetDepartmentJobFunctionGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentMembersCompleted As GetDepartmentMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubDepartmentsCompleted As GetSubDepartmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GroupIsMemberOfGroup2Completed As GroupIsMemberOfGroup2CompletedEventHandler
        
        '''<remarks/>
        Public Event GroupIsMemberOfGroupCompleted As GroupIsMemberOfGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDepartmentCompleted As FindDepartmentCompletedEventHandler
        
        '''<remarks/>
        Public Event FindUserCompleted As FindUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllOCMembersCompleted As GetAllOCMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentsCompleted As GetDepartmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCompleted As GetGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupNamesCompleted As GetGroupNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobFunctionGroupMembersCompleted As GetJobFunctionGroupMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTopLevelDepartmentsCompleted As GetTopLevelDepartmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyUserCompleted As VerifyUserCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignAllCurrentTasksCompleted As AssignAllCurrentTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignAllFutureTasksCompleted As AssignAllFutureTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentCompleted As GetDepartmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExactCaseUserCompleted As GetExactCaseUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetManagerCompleted As GetManagerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOCSubOrdinatesCompleted As GetOCSubOrdinatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubOrdinatesCompleted As GetSubOrdinatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubOrdinatesBySupervisorCompleted As GetSubOrdinatesBySupervisorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSupervisorCompleted As GetSupervisorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSupervisorFunctionCompleted As GetSupervisorFunctionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskListViewCompleted As GetTaskListViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserPrefsCompleted As GetUserPrefsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserRightsCompleted As GetUserRightsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetViewListCompleted As GetViewListCompletedEventHandler
        
        '''<remarks/>
        Public Event UserIsMemberOfGroupCompleted As UserIsMemberOfGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserPrefsCompleted As SetUserPrefsCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortIncidentCompleted As AbortIncidentCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortStepCompleted As AbortStepCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteIncidentCompleted As DeleteIncidentCompletedEventHandler
        
        '''<remarks/>
        Public Event DirectActivateStepCompleted As DirectActivateStepCompletedEventHandler
        
        '''<remarks/>
        Public Event DirectActivateStepExCompleted As DirectActivateStepExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIncidentStatusCompleted As GetIncidentStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGraphicalStatusCompleted As GetGraphicalStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortTaskIdCompleted As AbortTaskIdCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortCompleted As AbortCompletedEventHandler
        
        '''<remarks/>
        Public Event ReturnTaskCompleted As ReturnTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignQueueTaskCompleted As AssignQueueTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignTaskCompleted As AssignTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignTaskAssignedToUserCompleted As AssignTaskAssignedToUserCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTaskCompleted As DeleteTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event ExtractFormURLCompleted As ExtractFormURLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTaskVariablesCompleted As GetAllTaskVariablesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAtCompleted As GetAtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFirstTaskCompleted As GetFirstTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextTaskCompleted As GetNextTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrevTaskCompleted As GetPrevTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTasksCountCompleted As GetTasksCountCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadAssignedTasksCompleted As LoadAssignedTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadFilteredTasksCompleted As LoadFilteredTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadQueueTasksCompleted As LoadQueueTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadViewTasksCompleted As LoadViewTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignAllFutureTaskCompleted As AssignAllFutureTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignallCurrtaskCompleted As AssignallCurrtaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReassignedTaskCompleted As GetReassignedTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReassignedTask2Completed As GetReassignedTask2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosUltimusIrResolucionCompleted As GetDatosUltimusIrResolucionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosUltimusNivActualAprobCompleted As GetDatosUltimusNivActualAprobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosUltimusComiteCompleted As GetDatosUltimusComiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosSupervisorCompleted As GetDatosSupervisorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupMembersCompleted As GetGroupMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatosUltimusActualCompleted As GetDatosUltimusActualCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssociates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssociates(ByVal objFilter As TasklistFilter, ByRef objUser() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAssociates", New Object() {objFilter, objUser, strError})
            objUser = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssociatesAsync(ByVal objFilter As TasklistFilter, ByVal objUser() As User, ByVal strError As String)
            Me.GetAssociatesAsync(objFilter, objUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssociatesAsync(ByVal objFilter As TasklistFilter, ByVal objUser() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAssociatesOperationCompleted Is Nothing) Then
                Me.GetAssociatesOperationCompleted = AddressOf Me.OnGetAssociatesOperationCompleted
            End If
            Me.InvokeAsync("GetAssociates", New Object() {objFilter, objUser, strError}, Me.GetAssociatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssociatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssociatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssociatesCompleted(Me, New GetAssociatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDepartmentJobFunctionGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartmentJobFunctionGroups(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByRef strDeptJobFnGpsArr() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDepartmentJobFunctionGroups", New Object() {strDepartmentID, strDepartmentName, strDeptJobFnGpsArr, strError})
            strDeptJobFnGpsArr = CType(results(1),String())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentJobFunctionGroupsAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal strDeptJobFnGpsArr() As String, ByVal strError As String)
            Me.GetDepartmentJobFunctionGroupsAsync(strDepartmentID, strDepartmentName, strDeptJobFnGpsArr, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentJobFunctionGroupsAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal strDeptJobFnGpsArr() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDepartmentJobFunctionGroupsOperationCompleted Is Nothing) Then
                Me.GetDepartmentJobFunctionGroupsOperationCompleted = AddressOf Me.OnGetDepartmentJobFunctionGroupsOperationCompleted
            End If
            Me.InvokeAsync("GetDepartmentJobFunctionGroups", New Object() {strDepartmentID, strDepartmentName, strDeptJobFnGpsArr, strError}, Me.GetDepartmentJobFunctionGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentJobFunctionGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentJobFunctionGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentJobFunctionGroupsCompleted(Me, New GetDepartmentJobFunctionGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDepartmentMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartmentMembers(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByRef objUser() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDepartmentMembers", New Object() {strDepartmentID, strDepartmentName, objUser, strError})
            objUser = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentMembersAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal objUser() As User, ByVal strError As String)
            Me.GetDepartmentMembersAsync(strDepartmentID, strDepartmentName, objUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentMembersAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal objUser() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDepartmentMembersOperationCompleted Is Nothing) Then
                Me.GetDepartmentMembersOperationCompleted = AddressOf Me.OnGetDepartmentMembersOperationCompleted
            End If
            Me.InvokeAsync("GetDepartmentMembers", New Object() {strDepartmentID, strDepartmentName, objUser, strError}, Me.GetDepartmentMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentMembersCompleted(Me, New GetDepartmentMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubDepartments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubDepartments(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByRef objSubDepts() As Department, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubDepartments", New Object() {strDepartmentID, strDepartmentName, objSubDepts, strError})
            objSubDepts = CType(results(1),Department())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubDepartmentsAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal objSubDepts() As Department, ByVal strError As String)
            Me.GetSubDepartmentsAsync(strDepartmentID, strDepartmentName, objSubDepts, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubDepartmentsAsync(ByVal strDepartmentID As String, ByVal strDepartmentName As String, ByVal objSubDepts() As Department, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSubDepartmentsOperationCompleted Is Nothing) Then
                Me.GetSubDepartmentsOperationCompleted = AddressOf Me.OnGetSubDepartmentsOperationCompleted
            End If
            Me.InvokeAsync("GetSubDepartments", New Object() {strDepartmentID, strDepartmentName, objSubDepts, strError}, Me.GetSubDepartmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubDepartmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubDepartmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubDepartmentsCompleted(Me, New GetSubDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GroupIsMemberOfGroup2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GroupIsMemberOfGroup2(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GroupIsMemberOfGroup2", New Object() {strUserName, nJobId, strGroupName, strGroupProfile, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GroupIsMemberOfGroup2Async(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByVal strError As String)
            Me.GroupIsMemberOfGroup2Async(strUserName, nJobId, strGroupName, strGroupProfile, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GroupIsMemberOfGroup2Async(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GroupIsMemberOfGroup2OperationCompleted Is Nothing) Then
                Me.GroupIsMemberOfGroup2OperationCompleted = AddressOf Me.OnGroupIsMemberOfGroup2OperationCompleted
            End If
            Me.InvokeAsync("GroupIsMemberOfGroup2", New Object() {strUserName, nJobId, strGroupName, strGroupProfile, strError}, Me.GroupIsMemberOfGroup2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGroupIsMemberOfGroup2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GroupIsMemberOfGroup2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GroupIsMemberOfGroup2Completed(Me, New GroupIsMemberOfGroup2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GroupIsMemberOfGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GroupIsMemberOfGroup(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GroupIsMemberOfGroup", New Object() {strUserName, nJobId, strGroupName, strGroupProfile, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GroupIsMemberOfGroupAsync(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByVal strError As String)
            Me.GroupIsMemberOfGroupAsync(strUserName, nJobId, strGroupName, strGroupProfile, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GroupIsMemberOfGroupAsync(ByVal strUserName As String, ByVal nJobId As Integer, ByVal strGroupName As String, ByVal strGroupProfile As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GroupIsMemberOfGroupOperationCompleted Is Nothing) Then
                Me.GroupIsMemberOfGroupOperationCompleted = AddressOf Me.OnGroupIsMemberOfGroupOperationCompleted
            End If
            Me.InvokeAsync("GroupIsMemberOfGroup", New Object() {strUserName, nJobId, strGroupName, strGroupProfile, strError}, Me.GroupIsMemberOfGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGroupIsMemberOfGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GroupIsMemberOfGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GroupIsMemberOfGroupCompleted(Me, New GroupIsMemberOfGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindDepartment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindDepartment(ByVal strDeptName As String, ByVal strDepId As String, ByRef objDept As Department, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("FindDepartment", New Object() {strDeptName, strDepId, objDept, strError})
            objDept = CType(results(1),Department)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDepartmentAsync(ByVal strDeptName As String, ByVal strDepId As String, ByVal objDept As Department, ByVal strError As String)
            Me.FindDepartmentAsync(strDeptName, strDepId, objDept, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDepartmentAsync(ByVal strDeptName As String, ByVal strDepId As String, ByVal objDept As Department, ByVal strError As String, ByVal userState As Object)
            If (Me.FindDepartmentOperationCompleted Is Nothing) Then
                Me.FindDepartmentOperationCompleted = AddressOf Me.OnFindDepartmentOperationCompleted
            End If
            Me.InvokeAsync("FindDepartment", New Object() {strDeptName, strDepId, objDept, strError}, Me.FindDepartmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDepartmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDepartmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDepartmentCompleted(Me, New FindDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindUser(ByVal strShortName As String, ByVal strFullName As String, ByVal intUserId As Integer, ByRef objUser As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("FindUser", New Object() {strShortName, strFullName, intUserId, objUser, strError})
            objUser = CType(results(1),User)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindUserAsync(ByVal strShortName As String, ByVal strFullName As String, ByVal intUserId As Integer, ByVal objUser As User, ByVal strError As String)
            Me.FindUserAsync(strShortName, strFullName, intUserId, objUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindUserAsync(ByVal strShortName As String, ByVal strFullName As String, ByVal intUserId As Integer, ByVal objUser As User, ByVal strError As String, ByVal userState As Object)
            If (Me.FindUserOperationCompleted Is Nothing) Then
                Me.FindUserOperationCompleted = AddressOf Me.OnFindUserOperationCompleted
            End If
            Me.InvokeAsync("FindUser", New Object() {strShortName, strFullName, intUserId, objUser, strError}, Me.FindUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindUserCompleted(Me, New FindUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllOCMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllOCMembers(ByRef objUserList() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllOCMembers", New Object() {objUserList, strError})
            objUserList = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllOCMembersAsync(ByVal objUserList() As User, ByVal strError As String)
            Me.GetAllOCMembersAsync(objUserList, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllOCMembersAsync(ByVal objUserList() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAllOCMembersOperationCompleted Is Nothing) Then
                Me.GetAllOCMembersOperationCompleted = AddressOf Me.OnGetAllOCMembersOperationCompleted
            End If
            Me.InvokeAsync("GetAllOCMembers", New Object() {objUserList, strError}, Me.GetAllOCMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllOCMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllOCMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllOCMembersCompleted(Me, New GetAllOCMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDepartments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartments(ByRef objDeptList() As Department, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDepartments", New Object() {objDeptList, strError})
            objDeptList = CType(results(1),Department())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentsAsync(ByVal objDeptList() As Department, ByVal strError As String)
            Me.GetDepartmentsAsync(objDeptList, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentsAsync(ByVal objDeptList() As Department, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDepartmentsOperationCompleted Is Nothing) Then
                Me.GetDepartmentsOperationCompleted = AddressOf Me.OnGetDepartmentsOperationCompleted
            End If
            Me.InvokeAsync("GetDepartments", New Object() {objDeptList, strError}, Me.GetDepartmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentsCompleted(Me, New GetDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroup(ByVal strGroupName As String, ByRef objGroup As Group, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetGroup", New Object() {strGroupName, objGroup, strError})
            objGroup = CType(results(1),Group)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync(ByVal strGroupName As String, ByVal objGroup As Group, ByVal strError As String)
            Me.GetGroupAsync(strGroupName, objGroup, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync(ByVal strGroupName As String, ByVal objGroup As Group, ByVal strError As String, ByVal userState As Object)
            If (Me.GetGroupOperationCompleted Is Nothing) Then
                Me.GetGroupOperationCompleted = AddressOf Me.OnGetGroupOperationCompleted
            End If
            Me.InvokeAsync("GetGroup", New Object() {strGroupName, objGroup, strError}, Me.GetGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCompleted(Me, New GetGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGroupNames", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupNames(ByRef strGroupArr() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetGroupNames", New Object() {strGroupArr, strError})
            strGroupArr = CType(results(1),String())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupNamesAsync(ByVal strGroupArr() As String, ByVal strError As String)
            Me.GetGroupNamesAsync(strGroupArr, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupNamesAsync(ByVal strGroupArr() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetGroupNamesOperationCompleted Is Nothing) Then
                Me.GetGroupNamesOperationCompleted = AddressOf Me.OnGetGroupNamesOperationCompleted
            End If
            Me.InvokeAsync("GetGroupNames", New Object() {strGroupArr, strError}, Me.GetGroupNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupNamesCompleted(Me, New GetGroupNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobFunctionGroupMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobFunctionGroupMembers(ByVal strJobFunctionGroup As String, ByRef UserList() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetJobFunctionGroupMembers", New Object() {strJobFunctionGroup, UserList, strError})
            UserList = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobFunctionGroupMembersAsync(ByVal strJobFunctionGroup As String, ByVal UserList() As User, ByVal strError As String)
            Me.GetJobFunctionGroupMembersAsync(strJobFunctionGroup, UserList, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobFunctionGroupMembersAsync(ByVal strJobFunctionGroup As String, ByVal UserList() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetJobFunctionGroupMembersOperationCompleted Is Nothing) Then
                Me.GetJobFunctionGroupMembersOperationCompleted = AddressOf Me.OnGetJobFunctionGroupMembersOperationCompleted
            End If
            Me.InvokeAsync("GetJobFunctionGroupMembers", New Object() {strJobFunctionGroup, UserList, strError}, Me.GetJobFunctionGroupMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobFunctionGroupMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobFunctionGroupMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobFunctionGroupMembersCompleted(Me, New GetJobFunctionGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTopLevelDepartments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTopLevelDepartments(ByRef objDepList() As Department, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTopLevelDepartments", New Object() {objDepList, strError})
            objDepList = CType(results(1),Department())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTopLevelDepartmentsAsync(ByVal objDepList() As Department, ByVal strError As String)
            Me.GetTopLevelDepartmentsAsync(objDepList, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTopLevelDepartmentsAsync(ByVal objDepList() As Department, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTopLevelDepartmentsOperationCompleted Is Nothing) Then
                Me.GetTopLevelDepartmentsOperationCompleted = AddressOf Me.OnGetTopLevelDepartmentsOperationCompleted
            End If
            Me.InvokeAsync("GetTopLevelDepartments", New Object() {objDepList, strError}, Me.GetTopLevelDepartmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTopLevelDepartmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTopLevelDepartmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTopLevelDepartmentsCompleted(Me, New GetTopLevelDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerifyUser(ByVal strUser As String, ByVal strPassword As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("VerifyUser", New Object() {strUser, strPassword, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyUserAsync(ByVal strUser As String, ByVal strPassword As String, ByVal strError As String)
            Me.VerifyUserAsync(strUser, strPassword, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyUserAsync(ByVal strUser As String, ByVal strPassword As String, ByVal strError As String, ByVal userState As Object)
            If (Me.VerifyUserOperationCompleted Is Nothing) Then
                Me.VerifyUserOperationCompleted = AddressOf Me.OnVerifyUserOperationCompleted
            End If
            Me.InvokeAsync("VerifyUser", New Object() {strUser, strPassword, strError}, Me.VerifyUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyUserCompleted(Me, New VerifyUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignAllCurrentTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignAllCurrentTasks(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignAllCurrentTasks", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignAllCurrentTasksAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByVal strError As String)
            Me.AssignAllCurrentTasksAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignAllCurrentTasksAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignAllCurrentTasksOperationCompleted Is Nothing) Then
                Me.AssignAllCurrentTasksOperationCompleted = AddressOf Me.OnAssignAllCurrentTasksOperationCompleted
            End If
            Me.InvokeAsync("AssignAllCurrentTasks", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, strError}, Me.AssignAllCurrentTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignAllCurrentTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignAllCurrentTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignAllCurrentTasksCompleted(Me, New AssignAllCurrentTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignAllFutureTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignAllFutureTasks(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByVal dateAssignedUntil As Double, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignAllFutureTasks", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, dateAssignedUntil, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignAllFutureTasksAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByVal dateAssignedUntil As Double, ByVal strError As String)
            Me.AssignAllFutureTasksAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, dateAssignedUntil, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignAllFutureTasksAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strAssignedTo As String, ByVal dateAssignedUntil As Double, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignAllFutureTasksOperationCompleted Is Nothing) Then
                Me.AssignAllFutureTasksOperationCompleted = AddressOf Me.OnAssignAllFutureTasksOperationCompleted
            End If
            Me.InvokeAsync("AssignAllFutureTasks", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strAssignedTo, dateAssignedUntil, strError}, Me.AssignAllFutureTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignAllFutureTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignAllFutureTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignAllFutureTasksCompleted(Me, New AssignAllFutureTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDepartment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartment(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef strDepartment As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDepartment", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strDepartment, strError})
            strDepartment = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strDepartment As String, ByVal strError As String)
            Me.GetDepartmentAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strDepartment, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strDepartment As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDepartmentOperationCompleted Is Nothing) Then
                Me.GetDepartmentOperationCompleted = AddressOf Me.OnGetDepartmentOperationCompleted
            End If
            Me.InvokeAsync("GetDepartment", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strDepartment, strError}, Me.GetDepartmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentCompleted(Me, New GetDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExactCaseUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExactCaseUser(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef strExactUser As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetExactCaseUser", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strExactUser, strError})
            strExactUser = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExactCaseUserAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strExactUser As String, ByVal strError As String)
            Me.GetExactCaseUserAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strExactUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExactCaseUserAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strExactUser As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetExactCaseUserOperationCompleted Is Nothing) Then
                Me.GetExactCaseUserOperationCompleted = AddressOf Me.OnGetExactCaseUserOperationCompleted
            End If
            Me.InvokeAsync("GetExactCaseUser", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strExactUser, strError}, Me.GetExactCaseUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExactCaseUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExactCaseUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExactCaseUserCompleted(Me, New GetExactCaseUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManager", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManager(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef strManager As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetManager", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strManager, strError})
            strManager = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManagerAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strManager As String, ByVal strError As String)
            Me.GetManagerAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strManager, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManagerAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strManager As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetManagerOperationCompleted Is Nothing) Then
                Me.GetManagerOperationCompleted = AddressOf Me.OnGetManagerOperationCompleted
            End If
            Me.InvokeAsync("GetManager", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strManager, strError}, Me.GetManagerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManagerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManagerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManagerCompleted(Me, New GetManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOCSubOrdinates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOCSubOrdinates(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef lstSubOrdinates() As Object, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetOCSubOrdinates", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, lstSubOrdinates, strError})
            lstSubOrdinates = CType(results(1),Object())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOCSubOrdinatesAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal lstSubOrdinates() As Object, ByVal strError As String)
            Me.GetOCSubOrdinatesAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, lstSubOrdinates, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOCSubOrdinatesAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal lstSubOrdinates() As Object, ByVal strError As String, ByVal userState As Object)
            If (Me.GetOCSubOrdinatesOperationCompleted Is Nothing) Then
                Me.GetOCSubOrdinatesOperationCompleted = AddressOf Me.OnGetOCSubOrdinatesOperationCompleted
            End If
            Me.InvokeAsync("GetOCSubOrdinates", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, lstSubOrdinates, strError}, Me.GetOCSubOrdinatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOCSubOrdinatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOCSubOrdinatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOCSubOrdinatesCompleted(Me, New GetOCSubOrdinatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubOrdinates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubOrdinates(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef objSubOrdinatesArr() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubOrdinates", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError})
            objSubOrdinatesArr = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubOrdinatesAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objSubOrdinatesArr() As User, ByVal strError As String)
            Me.GetSubOrdinatesAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubOrdinatesAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objSubOrdinatesArr() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSubOrdinatesOperationCompleted Is Nothing) Then
                Me.GetSubOrdinatesOperationCompleted = AddressOf Me.OnGetSubOrdinatesOperationCompleted
            End If
            Me.InvokeAsync("GetSubOrdinates", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError}, Me.GetSubOrdinatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubOrdinatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubOrdinatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubOrdinatesCompleted(Me, New GetSubOrdinatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubOrdinatesBySupervisor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubOrdinatesBySupervisor(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef objSubOrdinatesArr() As User, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubOrdinatesBySupervisor", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError})
            objSubOrdinatesArr = CType(results(1),User())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubOrdinatesBySupervisorAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objSubOrdinatesArr() As User, ByVal strError As String)
            Me.GetSubOrdinatesBySupervisorAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubOrdinatesBySupervisorAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objSubOrdinatesArr() As User, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSubOrdinatesBySupervisorOperationCompleted Is Nothing) Then
                Me.GetSubOrdinatesBySupervisorOperationCompleted = AddressOf Me.OnGetSubOrdinatesBySupervisorOperationCompleted
            End If
            Me.InvokeAsync("GetSubOrdinatesBySupervisor", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objSubOrdinatesArr, strError}, Me.GetSubOrdinatesBySupervisorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubOrdinatesBySupervisorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubOrdinatesBySupervisorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubOrdinatesBySupervisorCompleted(Me, New GetSubOrdinatesBySupervisorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSupervisor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSupervisor(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef strSupervisor As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSupervisor", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strSupervisor, strError})
            strSupervisor = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSupervisorAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strSupervisor As String, ByVal strError As String)
            Me.GetSupervisorAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strSupervisor, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSupervisorAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strSupervisor As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSupervisorOperationCompleted Is Nothing) Then
                Me.GetSupervisorOperationCompleted = AddressOf Me.OnGetSupervisorOperationCompleted
            End If
            Me.InvokeAsync("GetSupervisor", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strSupervisor, strError}, Me.GetSupervisorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSupervisorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSupervisorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSupervisorCompleted(Me, New GetSupervisorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSupervisorFunction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSupervisorFunction(ByVal strUserName As String, ByRef strCodeSupervisor As String, ByRef strNameSupervisor As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSupervisorFunction", New Object() {strUserName, strCodeSupervisor, strNameSupervisor, strError})
            strCodeSupervisor = CType(results(1),String)
            strNameSupervisor = CType(results(2),String)
            strError = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSupervisorFunctionAsync(ByVal strUserName As String, ByVal strCodeSupervisor As String, ByVal strNameSupervisor As String, ByVal strError As String)
            Me.GetSupervisorFunctionAsync(strUserName, strCodeSupervisor, strNameSupervisor, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSupervisorFunctionAsync(ByVal strUserName As String, ByVal strCodeSupervisor As String, ByVal strNameSupervisor As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSupervisorFunctionOperationCompleted Is Nothing) Then
                Me.GetSupervisorFunctionOperationCompleted = AddressOf Me.OnGetSupervisorFunctionOperationCompleted
            End If
            Me.InvokeAsync("GetSupervisorFunction", New Object() {strUserName, strCodeSupervisor, strNameSupervisor, strError}, Me.GetSupervisorFunctionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSupervisorFunctionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSupervisorFunctionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSupervisorFunctionCompleted(Me, New GetSupervisorFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskListView", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskListView(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strViewName As String, ByRef tasklistViewObj As TasklistView, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskListView", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strViewName, tasklistViewObj, strError})
            tasklistViewObj = CType(results(1),TasklistView)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskListViewAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strViewName As String, ByVal tasklistViewObj As TasklistView, ByVal strError As String)
            Me.GetTaskListViewAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strViewName, tasklistViewObj, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskListViewAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strViewName As String, ByVal tasklistViewObj As TasklistView, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTaskListViewOperationCompleted Is Nothing) Then
                Me.GetTaskListViewOperationCompleted = AddressOf Me.OnGetTaskListViewOperationCompleted
            End If
            Me.InvokeAsync("GetTaskListView", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strViewName, tasklistViewObj, strError}, Me.GetTaskListViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskListViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskListViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskListViewCompleted(Me, New GetTaskListViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserPrefs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserPrefs(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef objUserPrefs As UserPreferences, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserPrefs", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPrefs, strError})
            objUserPrefs = CType(results(1),UserPreferences)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserPrefsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objUserPrefs As UserPreferences, ByVal strError As String)
            Me.GetUserPrefsAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPrefs, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserPrefsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objUserPrefs As UserPreferences, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUserPrefsOperationCompleted Is Nothing) Then
                Me.GetUserPrefsOperationCompleted = AddressOf Me.OnGetUserPrefsOperationCompleted
            End If
            Me.InvokeAsync("GetUserPrefs", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPrefs, strError}, Me.GetUserPrefsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserPrefsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserPrefsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserPrefsCompleted(Me, New GetUserPrefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserRights", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetUserRights(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef intlRights As Integer, ByRef strError As String)
            Dim results() As Object = Me.Invoke("GetUserRights", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, intlRights, strError})
            intlRights = CType(results(0),Integer)
            strError = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserRightsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal intlRights As Integer, ByVal strError As String)
            Me.GetUserRightsAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, intlRights, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserRightsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal intlRights As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUserRightsOperationCompleted Is Nothing) Then
                Me.GetUserRightsOperationCompleted = AddressOf Me.OnGetUserRightsOperationCompleted
            End If
            Me.InvokeAsync("GetUserRights", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, intlRights, strError}, Me.GetUserRightsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserRightsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserRightsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserRightsCompleted(Me, New GetUserRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetViewList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetViewList(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByRef listOfViews() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetViewList", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, listOfViews, strError})
            listOfViews = CType(results(1),String())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetViewListAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal listOfViews() As String, ByVal strError As String)
            Me.GetViewListAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, listOfViews, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetViewListAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal listOfViews() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetViewListOperationCompleted Is Nothing) Then
                Me.GetViewListOperationCompleted = AddressOf Me.OnGetViewListOperationCompleted
            End If
            Me.InvokeAsync("GetViewList", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, listOfViews, strError}, Me.GetViewListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetViewListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetViewListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetViewListCompleted(Me, New GetViewListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserIsMemberOfGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserIsMemberOfGroup(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strGroupName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UserIsMemberOfGroup", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strGroupName, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserIsMemberOfGroupAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strGroupName As String, ByVal strError As String)
            Me.UserIsMemberOfGroupAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strGroupName, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserIsMemberOfGroupAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal strGroupName As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UserIsMemberOfGroupOperationCompleted Is Nothing) Then
                Me.UserIsMemberOfGroupOperationCompleted = AddressOf Me.OnUserIsMemberOfGroupOperationCompleted
            End If
            Me.InvokeAsync("UserIsMemberOfGroup", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, strGroupName, strError}, Me.UserIsMemberOfGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserIsMemberOfGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserIsMemberOfGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserIsMemberOfGroupCompleted(Me, New UserIsMemberOfGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserPrefs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUserPrefs(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objUserPref As UserPreferences, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SetUserPrefs", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPref, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserPrefsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objUserPref As UserPreferences, ByVal strError As String)
            Me.SetUserPrefsAsync(nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPref, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserPrefsAsync(ByVal nUserID As Integer, ByVal strDepartmentName As String, ByVal strJobFunction As String, ByVal strUserFullName As String, ByVal strUserName As String, ByVal objUserPref As UserPreferences, ByVal strError As String, ByVal userState As Object)
            If (Me.SetUserPrefsOperationCompleted Is Nothing) Then
                Me.SetUserPrefsOperationCompleted = AddressOf Me.OnSetUserPrefsOperationCompleted
            End If
            Me.InvokeAsync("SetUserPrefs", New Object() {nUserID, strDepartmentName, strJobFunction, strUserFullName, strUserName, objUserPref, strError}, Me.SetUserPrefsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserPrefsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserPrefsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserPrefsCompleted(Me, New SetUserPrefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortIncident", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbortIncident(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strUserName As String, ByVal strReason As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AbortIncident", New Object() {strProcessName, intIncidente, strUserName, strReason, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortIncidentAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strUserName As String, ByVal strReason As String, ByVal strError As String)
            Me.AbortIncidentAsync(strProcessName, intIncidente, strUserName, strReason, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortIncidentAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strUserName As String, ByVal strReason As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AbortIncidentOperationCompleted Is Nothing) Then
                Me.AbortIncidentOperationCompleted = AddressOf Me.OnAbortIncidentOperationCompleted
            End If
            Me.InvokeAsync("AbortIncident", New Object() {strProcessName, intIncidente, strUserName, strReason, strError}, Me.AbortIncidentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortIncidentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortIncidentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortIncidentCompleted(Me, New AbortIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortStep", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbortStep(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AbortStep", New Object() {strProcessName, intIncidente, strStepLabel, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortStepAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByVal strError As String)
            Me.AbortStepAsync(strProcessName, intIncidente, strStepLabel, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortStepAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AbortStepOperationCompleted Is Nothing) Then
                Me.AbortStepOperationCompleted = AddressOf Me.OnAbortStepOperationCompleted
            End If
            Me.InvokeAsync("AbortStep", New Object() {strProcessName, intIncidente, strStepLabel, strError}, Me.AbortStepOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortStepOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortStepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortStepCompleted(Me, New AbortStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteIncident", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteIncident(ByVal strProcessName As String, ByVal intIncidente As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteIncident", New Object() {strProcessName, intIncidente, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteIncidentAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strError As String)
            Me.DeleteIncidentAsync(strProcessName, intIncidente, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteIncidentAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.DeleteIncidentOperationCompleted Is Nothing) Then
                Me.DeleteIncidentOperationCompleted = AddressOf Me.OnDeleteIncidentOperationCompleted
            End If
            Me.InvokeAsync("DeleteIncident", New Object() {strProcessName, intIncidente, strError}, Me.DeleteIncidentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteIncidentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteIncidentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteIncidentCompleted(Me, New DeleteIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DirectActivateStep", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DirectActivateStep(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("DirectActivateStep", New Object() {strProcessName, intIncidente, strStepLabel, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DirectActivateStepAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByVal strError As String)
            Me.DirectActivateStepAsync(strProcessName, intIncidente, strStepLabel, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DirectActivateStepAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal strStepLabel As String, ByVal strError As String, ByVal userState As Object)
            If (Me.DirectActivateStepOperationCompleted Is Nothing) Then
                Me.DirectActivateStepOperationCompleted = AddressOf Me.OnDirectActivateStepOperationCompleted
            End If
            Me.InvokeAsync("DirectActivateStep", New Object() {strProcessName, intIncidente, strStepLabel, strError}, Me.DirectActivateStepOperationCompleted, userState)
        End Sub
        
        Private Sub OnDirectActivateStepOperationCompleted(ByVal arg As Object)
            If (Not (Me.DirectActivateStepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DirectActivateStepCompleted(Me, New DirectActivateStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DirectActivateStepEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DirectActivateStepEx(ByVal strProcessName As String, ByVal intIncidente As Integer, ByRef objPrevTask As Task, ByVal strStepLabel As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("DirectActivateStepEx", New Object() {strProcessName, intIncidente, objPrevTask, strStepLabel, strError})
            objPrevTask = CType(results(1),Task)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DirectActivateStepExAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal objPrevTask As Task, ByVal strStepLabel As String, ByVal strError As String)
            Me.DirectActivateStepExAsync(strProcessName, intIncidente, objPrevTask, strStepLabel, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DirectActivateStepExAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal objPrevTask As Task, ByVal strStepLabel As String, ByVal strError As String, ByVal userState As Object)
            If (Me.DirectActivateStepExOperationCompleted Is Nothing) Then
                Me.DirectActivateStepExOperationCompleted = AddressOf Me.OnDirectActivateStepExOperationCompleted
            End If
            Me.InvokeAsync("DirectActivateStepEx", New Object() {strProcessName, intIncidente, objPrevTask, strStepLabel, strError}, Me.DirectActivateStepExOperationCompleted, userState)
        End Sub
        
        Private Sub OnDirectActivateStepExOperationCompleted(ByVal arg As Object)
            If (Not (Me.DirectActivateStepExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DirectActivateStepExCompleted(Me, New DirectActivateStepExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIncidentStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIncidentStatus(ByVal strProcessName As String, ByVal intIncidente As Integer, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oarrListStepStatus() As structStepStatus, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIncidentStatus", New Object() {strProcessName, intIncidente, oarrListStepStatus, strError})
            oarrListStepStatus = CType(results(1),structStepStatus())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIncidentStatusAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal oarrListStepStatus() As structStepStatus, ByVal strError As String)
            Me.GetIncidentStatusAsync(strProcessName, intIncidente, oarrListStepStatus, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIncidentStatusAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal oarrListStepStatus() As structStepStatus, ByVal strError As String, ByVal userState As Object)
            If (Me.GetIncidentStatusOperationCompleted Is Nothing) Then
                Me.GetIncidentStatusOperationCompleted = AddressOf Me.OnGetIncidentStatusOperationCompleted
            End If
            Me.InvokeAsync("GetIncidentStatus", New Object() {strProcessName, intIncidente, oarrListStepStatus, strError}, Me.GetIncidentStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIncidentStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIncidentStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIncidentStatusCompleted(Me, New GetIncidentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGraphicalStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGraphicalStatus(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal intVersion As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef bytesGif() As Byte, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetGraphicalStatus", New Object() {strProcessName, intIncidente, intVersion, bytesGif, strError})
            bytesGif = CType(results(1),Byte())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGraphicalStatusAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal intVersion As Integer, ByVal bytesGif() As Byte, ByVal strError As String)
            Me.GetGraphicalStatusAsync(strProcessName, intIncidente, intVersion, bytesGif, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGraphicalStatusAsync(ByVal strProcessName As String, ByVal intIncidente As Integer, ByVal intVersion As Integer, ByVal bytesGif() As Byte, ByVal strError As String, ByVal userState As Object)
            If (Me.GetGraphicalStatusOperationCompleted Is Nothing) Then
                Me.GetGraphicalStatusOperationCompleted = AddressOf Me.OnGetGraphicalStatusOperationCompleted
            End If
            Me.InvokeAsync("GetGraphicalStatus", New Object() {strProcessName, intIncidente, intVersion, bytesGif, strError}, Me.GetGraphicalStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGraphicalStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGraphicalStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGraphicalStatusCompleted(Me, New GetGraphicalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortTaskId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbortTaskId(ByVal strTaskId As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AbortTaskId", New Object() {strTaskId, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortTaskIdAsync(ByVal strTaskId As String, ByVal strError As String)
            Me.AbortTaskIdAsync(strTaskId, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortTaskIdAsync(ByVal strTaskId As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AbortTaskIdOperationCompleted Is Nothing) Then
                Me.AbortTaskIdOperationCompleted = AddressOf Me.OnAbortTaskIdOperationCompleted
            End If
            Me.InvokeAsync("AbortTaskId", New Object() {strTaskId, strError}, Me.AbortTaskIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortTaskIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortTaskIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortTaskIdCompleted(Me, New AbortTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Abort", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Abort(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("Abort", New Object() {objFilter, intFilterStatusIncident, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strError As String)
            Me.AbortAsync(objFilter, intFilterStatusIncident, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.AbortOperationCompleted Is Nothing) Then
                Me.AbortOperationCompleted = AddressOf Me.OnAbortOperationCompleted
            End If
            Me.InvokeAsync("Abort", New Object() {objFilter, intFilterStatusIncident, strError}, Me.AbortOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortCompleted(Me, New AbortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReturnTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReturnTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strMemo As String, ByRef objVariableList() As Variable, ByRef GetTasksCount As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ReturnTask", New Object() {objFilter, intFilterStatusIncident, strMemo, objVariableList, GetTasksCount, strError})
            objVariableList = CType(results(1),Variable())
            GetTasksCount = CType(results(2),Integer)
            strError = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReturnTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strMemo As String, ByVal objVariableList() As Variable, ByVal GetTasksCount As Integer, ByVal strError As String)
            Me.ReturnTaskAsync(objFilter, intFilterStatusIncident, strMemo, objVariableList, GetTasksCount, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReturnTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strMemo As String, ByVal objVariableList() As Variable, ByVal GetTasksCount As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.ReturnTaskOperationCompleted Is Nothing) Then
                Me.ReturnTaskOperationCompleted = AddressOf Me.OnReturnTaskOperationCompleted
            End If
            Me.InvokeAsync("ReturnTask", New Object() {objFilter, intFilterStatusIncident, strMemo, objVariableList, GetTasksCount, strError}, Me.ReturnTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnReturnTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReturnTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReturnTaskCompleted(Me, New ReturnTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignQueueTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignQueueTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strAssignToUser As String, ByRef strAssignedUser As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignQueueTask", New Object() {objFilter, intFilterStatusIncident, strAssignedTo, strAssignToUser, strAssignedUser, strError})
            strAssignedUser = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignQueueTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strAssignToUser As String, ByVal strAssignedUser As String, ByVal strError As String)
            Me.AssignQueueTaskAsync(objFilter, intFilterStatusIncident, strAssignedTo, strAssignToUser, strAssignedUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignQueueTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strAssignToUser As String, ByVal strAssignedUser As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignQueueTaskOperationCompleted Is Nothing) Then
                Me.AssignQueueTaskOperationCompleted = AddressOf Me.OnAssignQueueTaskOperationCompleted
            End If
            Me.InvokeAsync("AssignQueueTask", New Object() {objFilter, intFilterStatusIncident, strAssignedTo, strAssignToUser, strAssignedUser, strError}, Me.AssignQueueTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignQueueTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignQueueTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignQueueTaskCompleted(Me, New AssignQueueTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strNameProcess As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignTask", New Object() {objFilter, intFilterStatusIncident, strAssignedTo, strNameProcess, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strNameProcess As String, ByVal strError As String)
            Me.AssignTaskAsync(objFilter, intFilterStatusIncident, strAssignedTo, strNameProcess, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedTo As String, ByVal strNameProcess As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignTaskOperationCompleted Is Nothing) Then
                Me.AssignTaskOperationCompleted = AddressOf Me.OnAssignTaskOperationCompleted
            End If
            Me.InvokeAsync("AssignTask", New Object() {objFilter, intFilterStatusIncident, strAssignedTo, strNameProcess, strError}, Me.AssignTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignTaskCompleted(Me, New AssignTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignTaskAssignedToUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignTaskAssignedToUser(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByRef strAssignedToUser As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignTaskAssignedToUser", New Object() {objFilter, intFilterStatusIncident, strAssignedToUser, strError})
            strAssignedToUser = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignTaskAssignedToUserAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedToUser As String, ByVal strError As String)
            Me.AssignTaskAssignedToUserAsync(objFilter, intFilterStatusIncident, strAssignedToUser, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignTaskAssignedToUserAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strAssignedToUser As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignTaskAssignedToUserOperationCompleted Is Nothing) Then
                Me.AssignTaskAssignedToUserOperationCompleted = AddressOf Me.OnAssignTaskAssignedToUserOperationCompleted
            End If
            Me.InvokeAsync("AssignTaskAssignedToUser", New Object() {objFilter, intFilterStatusIncident, strAssignedToUser, strError}, Me.AssignTaskAssignedToUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignTaskAssignedToUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignTaskAssignedToUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignTaskAssignedToUserCompleted(Me, New AssignTaskAssignedToUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteTask", New Object() {objFilter, intFilterStatusIncident, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strError As String)
            Me.DeleteTaskAsync(objFilter, intFilterStatusIncident, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.DeleteTaskOperationCompleted Is Nothing) Then
                Me.DeleteTaskOperationCompleted = AddressOf Me.OnDeleteTaskOperationCompleted
            End If
            Me.InvokeAsync("DeleteTask", New Object() {objFilter, intFilterStatusIncident, strError}, Me.DeleteTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTaskCompleted(Me, New DeleteTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExtractFormURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExtractFormURL(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByRef strURL As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ExtractFormURL", New Object() {objFilter, intFilterStatusIncident, strURL, strError})
            strURL = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExtractFormURLAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strURL As String, ByVal strError As String)
            Me.ExtractFormURLAsync(objFilter, intFilterStatusIncident, strURL, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExtractFormURLAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal strURL As String, ByVal strError As String, ByVal userState As Object)
            If (Me.ExtractFormURLOperationCompleted Is Nothing) Then
                Me.ExtractFormURLOperationCompleted = AddressOf Me.OnExtractFormURLOperationCompleted
            End If
            Me.InvokeAsync("ExtractFormURL", New Object() {objFilter, intFilterStatusIncident, strURL, strError}, Me.ExtractFormURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnExtractFormURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExtractFormURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExtractFormURLCompleted(Me, New ExtractFormURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTaskVariables", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTaskVariables(ByVal strTaskId As String, ByRef ListVars() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllTaskVariables", New Object() {strTaskId, ListVars, strError})
            ListVars = CType(results(1),Variable())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTaskVariablesAsync(ByVal strTaskId As String, ByVal ListVars() As Variable, ByVal strError As String)
            Me.GetAllTaskVariablesAsync(strTaskId, ListVars, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTaskVariablesAsync(ByVal strTaskId As String, ByVal ListVars() As Variable, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAllTaskVariablesOperationCompleted Is Nothing) Then
                Me.GetAllTaskVariablesOperationCompleted = AddressOf Me.OnGetAllTaskVariablesOperationCompleted
            End If
            Me.InvokeAsync("GetAllTaskVariables", New Object() {strTaskId, ListVars, strError}, Me.GetAllTaskVariablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTaskVariablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTaskVariablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTaskVariablesCompleted(Me, New GetAllTaskVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAt(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAt", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAtAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.GetAtAsync(objFilter, intFilterStatusIncident, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAtAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAtOperationCompleted Is Nothing) Then
                Me.GetAtOperationCompleted = AddressOf Me.OnGetAtOperationCompleted
            End If
            Me.InvokeAsync("GetAt", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError}, Me.GetAtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAtCompleted(Me, New GetAtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFirstTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFirstTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFirstTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFirstTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.GetFirstTaskAsync(objFilter, intFilterStatusIncident, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFirstTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.GetFirstTaskOperationCompleted Is Nothing) Then
                Me.GetFirstTaskOperationCompleted = AddressOf Me.OnGetFirstTaskOperationCompleted
            End If
            Me.InvokeAsync("GetFirstTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError}, Me.GetFirstTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFirstTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFirstTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFirstTaskCompleted(Me, New GetFirstTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNextTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNextTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.GetNextTaskAsync(objFilter, intFilterStatusIncident, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.GetNextTaskOperationCompleted Is Nothing) Then
                Me.GetNextTaskOperationCompleted = AddressOf Me.OnGetNextTaskOperationCompleted
            End If
            Me.InvokeAsync("GetNextTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError}, Me.GetNextTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextTaskCompleted(Me, New GetNextTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrevTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPrevTask(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPrevTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrevTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.GetPrevTaskAsync(objFilter, intFilterStatusIncident, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrevTaskAsync(ByVal objFilter As TasklistFilter, ByVal intFilterStatusIncident As Integer, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.GetPrevTaskOperationCompleted Is Nothing) Then
                Me.GetPrevTaskOperationCompleted = AddressOf Me.OnGetPrevTaskOperationCompleted
            End If
            Me.InvokeAsync("GetPrevTask", New Object() {objFilter, intFilterStatusIncident, oListTasks, strError}, Me.GetPrevTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrevTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrevTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrevTaskCompleted(Me, New GetPrevTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTasksCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTasksCount(ByVal objFilter As TasklistFilter, ByRef intCountTask As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTasksCount", New Object() {objFilter, intCountTask, strError})
            intCountTask = CType(results(1),Integer)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTasksCountAsync(ByVal objFilter As TasklistFilter, ByVal intCountTask As Integer, ByVal strError As String)
            Me.GetTasksCountAsync(objFilter, intCountTask, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTasksCountAsync(ByVal objFilter As TasklistFilter, ByVal intCountTask As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTasksCountOperationCompleted Is Nothing) Then
                Me.GetTasksCountOperationCompleted = AddressOf Me.OnGetTasksCountOperationCompleted
            End If
            Me.InvokeAsync("GetTasksCount", New Object() {objFilter, intCountTask, strError}, Me.GetTasksCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTasksCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTasksCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTasksCountCompleted(Me, New GetTasksCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadAssignedTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadAssignedTasks(ByVal strUser As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("LoadAssignedTasks", New Object() {strUser, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadAssignedTasksAsync(ByVal strUser As String, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.LoadAssignedTasksAsync(strUser, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadAssignedTasksAsync(ByVal strUser As String, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.LoadAssignedTasksOperationCompleted Is Nothing) Then
                Me.LoadAssignedTasksOperationCompleted = AddressOf Me.OnLoadAssignedTasksOperationCompleted
            End If
            Me.InvokeAsync("LoadAssignedTasks", New Object() {strUser, oListTasks, strError}, Me.LoadAssignedTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadAssignedTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadAssignedTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadAssignedTasksCompleted(Me, New LoadAssignedTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFilteredTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadFilteredTasks(ByVal objFilter As TasklistFilter, ByRef objTaskListRef As Tasklist, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("LoadFilteredTasks", New Object() {objFilter, objTaskListRef, strError})
            objTaskListRef = CType(results(1),Tasklist)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadFilteredTasksAsync(ByVal objFilter As TasklistFilter, ByVal objTaskListRef As Tasklist, ByVal strError As String)
            Me.LoadFilteredTasksAsync(objFilter, objTaskListRef, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadFilteredTasksAsync(ByVal objFilter As TasklistFilter, ByVal objTaskListRef As Tasklist, ByVal strError As String, ByVal userState As Object)
            If (Me.LoadFilteredTasksOperationCompleted Is Nothing) Then
                Me.LoadFilteredTasksOperationCompleted = AddressOf Me.OnLoadFilteredTasksOperationCompleted
            End If
            Me.InvokeAsync("LoadFilteredTasks", New Object() {objFilter, objTaskListRef, strError}, Me.LoadFilteredTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadFilteredTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadFilteredTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadFilteredTasksCompleted(Me, New LoadFilteredTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadQueueTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadQueueTasks(ByVal strUser As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("LoadQueueTasks", New Object() {strUser, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadQueueTasksAsync(ByVal strUser As String, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.LoadQueueTasksAsync(strUser, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadQueueTasksAsync(ByVal strUser As String, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.LoadQueueTasksOperationCompleted Is Nothing) Then
                Me.LoadQueueTasksOperationCompleted = AddressOf Me.OnLoadQueueTasksOperationCompleted
            End If
            Me.InvokeAsync("LoadQueueTasks", New Object() {strUser, oListTasks, strError}, Me.LoadQueueTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadQueueTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadQueueTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadQueueTasksCompleted(Me, New LoadQueueTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadViewTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadViewTasks(ByVal strUser As String, ByVal strViewName As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef oListTasks() As structListTask, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("LoadViewTasks", New Object() {strUser, strViewName, oListTasks, strError})
            oListTasks = CType(results(1),structListTask())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadViewTasksAsync(ByVal strUser As String, ByVal strViewName As String, ByVal oListTasks() As structListTask, ByVal strError As String)
            Me.LoadViewTasksAsync(strUser, strViewName, oListTasks, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadViewTasksAsync(ByVal strUser As String, ByVal strViewName As String, ByVal oListTasks() As structListTask, ByVal strError As String, ByVal userState As Object)
            If (Me.LoadViewTasksOperationCompleted Is Nothing) Then
                Me.LoadViewTasksOperationCompleted = AddressOf Me.OnLoadViewTasksOperationCompleted
            End If
            Me.InvokeAsync("LoadViewTasks", New Object() {strUser, strViewName, oListTasks, strError}, Me.LoadViewTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadViewTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadViewTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadViewTasksCompleted(Me, New LoadViewTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignAllFutureTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignAllFutureTask(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByVal dfecha As Double, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignAllFutureTask", New Object() {strUserOriginal, strUserReasignado, dfecha, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignAllFutureTaskAsync(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByVal dfecha As Double, ByVal strError As String)
            Me.AssignAllFutureTaskAsync(strUserOriginal, strUserReasignado, dfecha, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignAllFutureTaskAsync(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByVal dfecha As Double, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignAllFutureTaskOperationCompleted Is Nothing) Then
                Me.AssignAllFutureTaskOperationCompleted = AddressOf Me.OnAssignAllFutureTaskOperationCompleted
            End If
            Me.InvokeAsync("AssignAllFutureTask", New Object() {strUserOriginal, strUserReasignado, dfecha, strError}, Me.AssignAllFutureTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignAllFutureTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignAllFutureTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignAllFutureTaskCompleted(Me, New AssignAllFutureTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignallCurrtask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignallCurrtask(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AssignallCurrtask", New Object() {strUserOriginal, strUserReasignado, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignallCurrtaskAsync(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByVal strError As String)
            Me.AssignallCurrtaskAsync(strUserOriginal, strUserReasignado, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignallCurrtaskAsync(ByVal strUserOriginal As String, ByVal strUserReasignado As String, ByVal strError As String, ByVal userState As Object)
            If (Me.AssignallCurrtaskOperationCompleted Is Nothing) Then
                Me.AssignallCurrtaskOperationCompleted = AddressOf Me.OnAssignallCurrtaskOperationCompleted
            End If
            Me.InvokeAsync("AssignallCurrtask", New Object() {strUserOriginal, strUserReasignado, strError}, Me.AssignallCurrtaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignallCurrtaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignallCurrtaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignallCurrtaskCompleted(Me, New AssignallCurrtaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReassignedTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReassignedTask(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByRef strUserOld As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReassignedTask", New Object() {intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError})
            strUserOld = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReassignedTaskAsync(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByVal strUserOld As String, ByVal strError As String)
            Me.GetReassignedTaskAsync(intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReassignedTaskAsync(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByVal strUserOld As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetReassignedTaskOperationCompleted Is Nothing) Then
                Me.GetReassignedTaskOperationCompleted = AddressOf Me.OnGetReassignedTaskOperationCompleted
            End If
            Me.InvokeAsync("GetReassignedTask", New Object() {intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError}, Me.GetReassignedTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReassignedTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReassignedTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReassignedTaskCompleted(Me, New GetReassignedTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReassignedTask2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReassignedTask2(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByRef strUserOld As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReassignedTask2", New Object() {intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError})
            strUserOld = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReassignedTask2Async(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByVal strUserOld As String, ByVal strError As String)
            Me.GetReassignedTask2Async(intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReassignedTask2Async(ByVal intIncidente As Integer, ByVal strProceso As String, ByVal strUserLog As String, ByVal strEstacion As String, ByVal strUserOld As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetReassignedTask2OperationCompleted Is Nothing) Then
                Me.GetReassignedTask2OperationCompleted = AddressOf Me.OnGetReassignedTask2OperationCompleted
            End If
            Me.InvokeAsync("GetReassignedTask2", New Object() {intIncidente, strProceso, strUserLog, strEstacion, strUserOld, strError}, Me.GetReassignedTask2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReassignedTask2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReassignedTask2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReassignedTask2Completed(Me, New GetReassignedTask2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosUltimusIrResolucion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosUltimusIrResolucion(ByVal v_iNumeroIncidente As Integer, ByVal V_sIrResolucion As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDatosUltimusIrResolucion", New Object() {v_iNumeroIncidente, V_sIrResolucion})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusIrResolucionAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sIrResolucion As String)
            Me.GetDatosUltimusIrResolucionAsync(v_iNumeroIncidente, V_sIrResolucion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusIrResolucionAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sIrResolucion As String, ByVal userState As Object)
            If (Me.GetDatosUltimusIrResolucionOperationCompleted Is Nothing) Then
                Me.GetDatosUltimusIrResolucionOperationCompleted = AddressOf Me.OnGetDatosUltimusIrResolucionOperationCompleted
            End If
            Me.InvokeAsync("GetDatosUltimusIrResolucion", New Object() {v_iNumeroIncidente, V_sIrResolucion}, Me.GetDatosUltimusIrResolucionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosUltimusIrResolucionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosUltimusIrResolucionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosUltimusIrResolucionCompleted(Me, New GetDatosUltimusIrResolucionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosUltimusNivActualAprob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosUltimusNivActualAprob(ByVal v_iNumeroIncidente As Integer, ByVal V_sNivelActualAprobacion As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDatosUltimusNivActualAprob", New Object() {v_iNumeroIncidente, V_sNivelActualAprobacion})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusNivActualAprobAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sNivelActualAprobacion As String)
            Me.GetDatosUltimusNivActualAprobAsync(v_iNumeroIncidente, V_sNivelActualAprobacion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusNivActualAprobAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sNivelActualAprobacion As String, ByVal userState As Object)
            If (Me.GetDatosUltimusNivActualAprobOperationCompleted Is Nothing) Then
                Me.GetDatosUltimusNivActualAprobOperationCompleted = AddressOf Me.OnGetDatosUltimusNivActualAprobOperationCompleted
            End If
            Me.InvokeAsync("GetDatosUltimusNivActualAprob", New Object() {v_iNumeroIncidente, V_sNivelActualAprobacion}, Me.GetDatosUltimusNivActualAprobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosUltimusNivActualAprobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosUltimusNivActualAprobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosUltimusNivActualAprobCompleted(Me, New GetDatosUltimusNivActualAprobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosUltimusComite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosUltimusComite(ByVal v_iNumeroIncidente As Integer, ByVal V_sNombreComite As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDatosUltimusComite", New Object() {v_iNumeroIncidente, V_sNombreComite})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusComiteAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sNombreComite As String)
            Me.GetDatosUltimusComiteAsync(v_iNumeroIncidente, V_sNombreComite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusComiteAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sNombreComite As String, ByVal userState As Object)
            If (Me.GetDatosUltimusComiteOperationCompleted Is Nothing) Then
                Me.GetDatosUltimusComiteOperationCompleted = AddressOf Me.OnGetDatosUltimusComiteOperationCompleted
            End If
            Me.InvokeAsync("GetDatosUltimusComite", New Object() {v_iNumeroIncidente, V_sNombreComite}, Me.GetDatosUltimusComiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosUltimusComiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosUltimusComiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosUltimusComiteCompleted(Me, New GetDatosUltimusComiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosSupervisor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosSupervisor(ByVal v_iNumeroIncidente As Integer, ByVal V_sSupervisor As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDatosSupervisor", New Object() {v_iNumeroIncidente, V_sSupervisor})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosSupervisorAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sSupervisor As String)
            Me.GetDatosSupervisorAsync(v_iNumeroIncidente, V_sSupervisor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosSupervisorAsync(ByVal v_iNumeroIncidente As Integer, ByVal V_sSupervisor As String, ByVal userState As Object)
            If (Me.GetDatosSupervisorOperationCompleted Is Nothing) Then
                Me.GetDatosSupervisorOperationCompleted = AddressOf Me.OnGetDatosSupervisorOperationCompleted
            End If
            Me.InvokeAsync("GetDatosSupervisor", New Object() {v_iNumeroIncidente, V_sSupervisor}, Me.GetDatosSupervisorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosSupervisorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosSupervisorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosSupervisorCompleted(Me, New GetDatosSupervisorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGroupMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupMembers(ByVal pstrGroupName As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByRef pstructGroupMembers() As structGroupMembers) As Boolean
            Dim results() As Object = Me.Invoke("GetGroupMembers", New Object() {pstrGroupName, pstructGroupMembers})
            pstructGroupMembers = CType(results(1),structGroupMembers())
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupMembersAsync(ByVal pstrGroupName As String, ByVal pstructGroupMembers() As structGroupMembers)
            Me.GetGroupMembersAsync(pstrGroupName, pstructGroupMembers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupMembersAsync(ByVal pstrGroupName As String, ByVal pstructGroupMembers() As structGroupMembers, ByVal userState As Object)
            If (Me.GetGroupMembersOperationCompleted Is Nothing) Then
                Me.GetGroupMembersOperationCompleted = AddressOf Me.OnGetGroupMembersOperationCompleted
            End If
            Me.InvokeAsync("GetGroupMembers", New Object() {pstrGroupName, pstructGroupMembers}, Me.GetGroupMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupMembersCompleted(Me, New GetGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDatosUltimusActual", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatosUltimusActual(ByVal v_iNumeroIncidente As Integer) As String
            Dim results() As Object = Me.Invoke("GetDatosUltimusActual", New Object() {v_iNumeroIncidente})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusActualAsync(ByVal v_iNumeroIncidente As Integer)
            Me.GetDatosUltimusActualAsync(v_iNumeroIncidente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatosUltimusActualAsync(ByVal v_iNumeroIncidente As Integer, ByVal userState As Object)
            If (Me.GetDatosUltimusActualOperationCompleted Is Nothing) Then
                Me.GetDatosUltimusActualOperationCompleted = AddressOf Me.OnGetDatosUltimusActualOperationCompleted
            End If
            Me.InvokeAsync("GetDatosUltimusActual", New Object() {v_iNumeroIncidente}, Me.GetDatosUltimusActualOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatosUltimusActualOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatosUltimusActualCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatosUltimusActualCompleted(Me, New GetDatosUltimusActualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TasklistFilter
        Inherits MarshalByRefObject
        
        Private m_dStartDateField As Double
        
        Private m_dEndDateField As Double
        
        Private m_nStartingDaysOfDueDateRelativeFromTodayField As Integer
        
        Private m_nEndingDaysOfDueDateRelativeFromTodayField As Integer
        
        Private m_nDateTypeField As Integer
        
        Private nFiltersMaskField As Integer
        
        Private strProcessNameFilterField As String
        
        Private strSummaryFilterField As String
        
        Private strStepLabelFilterField As String
        
        Private nPriorityStartField As Integer
        
        Private nPriorityEndField As Integer
        
        Private nIncidentNoField As Integer
        
        Private strArrUserNameField() As String
        
        '''<remarks/>
        Public Property m_dStartDate() As Double
            Get
                Return Me.m_dStartDateField
            End Get
            Set
                Me.m_dStartDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property m_dEndDate() As Double
            Get
                Return Me.m_dEndDateField
            End Get
            Set
                Me.m_dEndDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property m_nStartingDaysOfDueDateRelativeFromToday() As Integer
            Get
                Return Me.m_nStartingDaysOfDueDateRelativeFromTodayField
            End Get
            Set
                Me.m_nStartingDaysOfDueDateRelativeFromTodayField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property m_nEndingDaysOfDueDateRelativeFromToday() As Integer
            Get
                Return Me.m_nEndingDaysOfDueDateRelativeFromTodayField
            End Get
            Set
                Me.m_nEndingDaysOfDueDateRelativeFromTodayField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property m_nDateType() As Integer
            Get
                Return Me.m_nDateTypeField
            End Get
            Set
                Me.m_nDateTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nFiltersMask() As Integer
            Get
                Return Me.nFiltersMaskField
            End Get
            Set
                Me.nFiltersMaskField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strProcessNameFilter() As String
            Get
                Return Me.strProcessNameFilterField
            End Get
            Set
                Me.strProcessNameFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strSummaryFilter() As String
            Get
                Return Me.strSummaryFilterField
            End Get
            Set
                Me.strSummaryFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strStepLabelFilter() As String
            Get
                Return Me.strStepLabelFilterField
            End Get
            Set
                Me.strStepLabelFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nPriorityStart() As Integer
            Get
                Return Me.nPriorityStartField
            End Get
            Set
                Me.nPriorityStartField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nPriorityEnd() As Integer
            Get
                Return Me.nPriorityEndField
            End Get
            Set
                Me.nPriorityEndField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nIncidentNo() As Integer
            Get
                Return Me.nIncidentNoField
            End Get
            Set
                Me.nIncidentNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strArrUserName() As String()
            Get
                Return Me.strArrUserNameField
            End Get
            Set
                Me.strArrUserNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Tasklist)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Variable)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(DataboundInfo)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Task)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(UserPreferences)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(TasklistView)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(GroupMember)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Group)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Department)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(User)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(TasklistFilter)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class structGroupMembers
        
        Private strFullNameField As String
        
        Private strGroupNameField As String
        
        Private strMemberNameField As String
        
        '''<remarks/>
        Public Property strFullName() As String
            Get
                Return Me.strFullNameField
            End Get
            Set
                Me.strFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strGroupName() As String
            Get
                Return Me.strGroupNameField
            End Get
            Set
                Me.strGroupNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strMemberName() As String
            Get
                Return Me.strMemberNameField
            End Get
            Set
                Me.strMemberNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class structListTask
        
        Private dCostField As Double
        
        Private dDelayTimeField As Double
        
        Private dEndTimeField As Double
        
        Private dOverDueTimeField As Double
        
        Private dQueueEndTimeField As Double
        
        Private dQueueStartTimeField As Double
        
        Private dStartTimeField As Double
        
        Private dUrgentTimeField As Double
        
        Private nIncidentNoField As Integer
        
        Private nPriorityField As Integer
        
        Private nProcessVersionField As Integer
        
        Private nRecipientTypeField As Integer
        
        Private nStepPropertiesField As Integer
        
        Private nStepTypeField As Integer
        
        Private nTaskRateField As Integer
        
        Private nTaskStatusField As Integer
        
        Private nTaskSubStatusField As Integer
        
        Private nTaskTimeField As Integer
        
        Private strAssignedToUserField As String
        
        Private strAssignedToUserFullNameField As String
        
        Private strFormUrlField As String
        
        Private strGroupNameField As String
        
        Private strHelpUrlField As String
        
        Private strProcessNameField As String
        
        Private strRecipientField As String
        
        Private strRecipientFullNameField As String
        
        Private strStepIdField As String
        
        Private strTaskNotesField As String
        
        Private strUserField As String
        
        Private strUserFullNameField As String
        
        Private strTaskIdField As String
        
        Private strStepNameField As String
        
        '''<remarks/>
        Public Property dCost() As Double
            Get
                Return Me.dCostField
            End Get
            Set
                Me.dCostField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dDelayTime() As Double
            Get
                Return Me.dDelayTimeField
            End Get
            Set
                Me.dDelayTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dEndTime() As Double
            Get
                Return Me.dEndTimeField
            End Get
            Set
                Me.dEndTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dOverDueTime() As Double
            Get
                Return Me.dOverDueTimeField
            End Get
            Set
                Me.dOverDueTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dQueueEndTime() As Double
            Get
                Return Me.dQueueEndTimeField
            End Get
            Set
                Me.dQueueEndTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dQueueStartTime() As Double
            Get
                Return Me.dQueueStartTimeField
            End Get
            Set
                Me.dQueueStartTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dStartTime() As Double
            Get
                Return Me.dStartTimeField
            End Get
            Set
                Me.dStartTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dUrgentTime() As Double
            Get
                Return Me.dUrgentTimeField
            End Get
            Set
                Me.dUrgentTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nIncidentNo() As Integer
            Get
                Return Me.nIncidentNoField
            End Get
            Set
                Me.nIncidentNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nPriority() As Integer
            Get
                Return Me.nPriorityField
            End Get
            Set
                Me.nPriorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nProcessVersion() As Integer
            Get
                Return Me.nProcessVersionField
            End Get
            Set
                Me.nProcessVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nRecipientType() As Integer
            Get
                Return Me.nRecipientTypeField
            End Get
            Set
                Me.nRecipientTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nStepProperties() As Integer
            Get
                Return Me.nStepPropertiesField
            End Get
            Set
                Me.nStepPropertiesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nStepType() As Integer
            Get
                Return Me.nStepTypeField
            End Get
            Set
                Me.nStepTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nTaskRate() As Integer
            Get
                Return Me.nTaskRateField
            End Get
            Set
                Me.nTaskRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nTaskStatus() As Integer
            Get
                Return Me.nTaskStatusField
            End Get
            Set
                Me.nTaskStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nTaskSubStatus() As Integer
            Get
                Return Me.nTaskSubStatusField
            End Get
            Set
                Me.nTaskSubStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nTaskTime() As Integer
            Get
                Return Me.nTaskTimeField
            End Get
            Set
                Me.nTaskTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strAssignedToUser() As String
            Get
                Return Me.strAssignedToUserField
            End Get
            Set
                Me.strAssignedToUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strAssignedToUserFullName() As String
            Get
                Return Me.strAssignedToUserFullNameField
            End Get
            Set
                Me.strAssignedToUserFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strFormUrl() As String
            Get
                Return Me.strFormUrlField
            End Get
            Set
                Me.strFormUrlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strGroupName() As String
            Get
                Return Me.strGroupNameField
            End Get
            Set
                Me.strGroupNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strHelpUrl() As String
            Get
                Return Me.strHelpUrlField
            End Get
            Set
                Me.strHelpUrlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strProcessName() As String
            Get
                Return Me.strProcessNameField
            End Get
            Set
                Me.strProcessNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strRecipient() As String
            Get
                Return Me.strRecipientField
            End Get
            Set
                Me.strRecipientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strRecipientFullName() As String
            Get
                Return Me.strRecipientFullNameField
            End Get
            Set
                Me.strRecipientFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strStepId() As String
            Get
                Return Me.strStepIdField
            End Get
            Set
                Me.strStepIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strTaskNotes() As String
            Get
                Return Me.strTaskNotesField
            End Get
            Set
                Me.strTaskNotesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strUser() As String
            Get
                Return Me.strUserField
            End Get
            Set
                Me.strUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strUserFullName() As String
            Get
                Return Me.strUserFullNameField
            End Get
            Set
                Me.strUserFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strTaskId() As String
            Get
                Return Me.strTaskIdField
            End Get
            Set
                Me.strTaskIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strStepName() As String
            Get
                Return Me.strStepNameField
            End Get
            Set
                Me.strStepNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class structStepStatus
        
        Private strStepNameField As String
        
        Private nStepStatusField As Integer
        
        Private nStepSubStatusField As Integer
        
        Private nStepTypeField As Integer
        
        Private strStepRecipientField As String
        
        Private dtEndTimeField As Double
        
        Private dtStartTimeField As Double
        
        '''<remarks/>
        Public Property strStepName() As String
            Get
                Return Me.strStepNameField
            End Get
            Set
                Me.strStepNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nStepStatus() As Integer
            Get
                Return Me.nStepStatusField
            End Get
            Set
                Me.nStepStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nStepSubStatus() As Integer
            Get
                Return Me.nStepSubStatusField
            End Get
            Set
                Me.nStepSubStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nStepType() As Integer
            Get
                Return Me.nStepTypeField
            End Get
            Set
                Me.nStepTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strStepRecipient() As String
            Get
                Return Me.strStepRecipientField
            End Get
            Set
                Me.strStepRecipientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dtEndTime() As Double
            Get
                Return Me.dtEndTimeField
            End Get
            Set
                Me.dtEndTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dtStartTime() As Double
            Get
                Return Me.dtStartTimeField
            End Get
            Set
                Me.dtStartTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Tasklist
        Inherits MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Variable
        Inherits MarshalByRefObject
        
        Private strVariableNameField As String
        
        Private objVariableValueField() As Object
        
        '''<remarks/>
        Public Property strVariableName() As String
            Get
                Return Me.strVariableNameField
            End Get
            Set
                Me.strVariableNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property objVariableValue() As Object()
            Get
                Return Me.objVariableValueField
            End Get
            Set
                Me.objVariableValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class DataboundInfo
        Inherits MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Task
        Inherits MarshalByRefObject
        
        Private m_listDataboundColumnsField() As DataboundInfo
        
        Private strSummaryField As String
        
        Private nPriorityField As Integer
        
        Private dataBoundColumnsField() As DataboundInfo
        
        '''<remarks/>
        Public Property m_listDataboundColumns() As DataboundInfo()
            Get
                Return Me.m_listDataboundColumnsField
            End Get
            Set
                Me.m_listDataboundColumnsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strSummary() As String
            Get
                Return Me.strSummaryField
            End Get
            Set
                Me.strSummaryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nPriority() As Integer
            Get
                Return Me.nPriorityField
            End Get
            Set
                Me.nPriorityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DataBoundColumns() As DataboundInfo()
            Get
                Return Me.dataBoundColumnsField
            End Get
            Set
                Me.dataBoundColumnsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class UserPreferences
        Inherits MarshalByRefObject
        
        Private strUserNameField As String
        
        Private strEmailField As String
        
        Private strRefreshRateField As String
        
        Private nTasksPerPageField As Integer
        
        Private associatesListField() As User
        
        '''<remarks/>
        Public Property strUserName() As String
            Get
                Return Me.strUserNameField
            End Get
            Set
                Me.strUserNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strEmail() As String
            Get
                Return Me.strEmailField
            End Get
            Set
                Me.strEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strRefreshRate() As String
            Get
                Return Me.strRefreshRateField
            End Get
            Set
                Me.strRefreshRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nTasksPerPage() As Integer
            Get
                Return Me.nTasksPerPageField
            End Get
            Set
                Me.nTasksPerPageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AssociatesList() As User()
            Get
                Return Me.associatesListField
            End Get
            Set
                Me.associatesListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class User
        Inherits MarshalByRefObject
        
        Private strUserNameField As String
        
        Private strUserFullNameField As String
        
        Private strJobFunctionField As String
        
        Private nUserIDField As Integer
        
        Private strDepartmentNameField As String
        
        '''<remarks/>
        Public Property strUserName() As String
            Get
                Return Me.strUserNameField
            End Get
            Set
                Me.strUserNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strUserFullName() As String
            Get
                Return Me.strUserFullNameField
            End Get
            Set
                Me.strUserFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strJobFunction() As String
            Get
                Return Me.strJobFunctionField
            End Get
            Set
                Me.strJobFunctionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nUserID() As Integer
            Get
                Return Me.nUserIDField
            End Get
            Set
                Me.nUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strDepartmentName() As String
            Get
                Return Me.strDepartmentNameField
            End Get
            Set
                Me.strDepartmentNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TasklistView
        Inherits MarshalByRefObject
        
        Private strViewNameField As String
        
        Private strHelpTextField As String
        
        Private bDataBoundViewField As Boolean
        
        Private nSortColIDField As Integer
        
        Private nSortDirectionField As Integer
        
        Private listAssociatesField() As User
        
        '''<remarks/>
        Public Property strViewName() As String
            Get
                Return Me.strViewNameField
            End Get
            Set
                Me.strViewNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strHelpText() As String
            Get
                Return Me.strHelpTextField
            End Get
            Set
                Me.strHelpTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property bDataBoundView() As Boolean
            Get
                Return Me.bDataBoundViewField
            End Get
            Set
                Me.bDataBoundViewField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nSortColID() As Integer
            Get
                Return Me.nSortColIDField
            End Get
            Set
                Me.nSortColIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nSortDirection() As Integer
            Get
                Return Me.nSortDirectionField
            End Get
            Set
                Me.nSortDirectionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ListAssociates() As User()
            Get
                Return Me.listAssociatesField
            End Get
            Set
                Me.listAssociatesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class GroupMember
        Inherits MarshalByRefObject
        
        Private strMemberNameField As String
        
        Private strGroupNameField As String
        
        Private strFullNameField As String
        
        Private nWeightField As Integer
        
        Private nSequenceField As Integer
        
        '''<remarks/>
        Public Property strMemberName() As String
            Get
                Return Me.strMemberNameField
            End Get
            Set
                Me.strMemberNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strGroupName() As String
            Get
                Return Me.strGroupNameField
            End Get
            Set
                Me.strGroupNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strFullName() As String
            Get
                Return Me.strFullNameField
            End Get
            Set
                Me.strFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nWeight() As Integer
            Get
                Return Me.nWeightField
            End Get
            Set
                Me.nWeightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nSequence() As Integer
            Get
                Return Me.nSequenceField
            End Get
            Set
                Me.nSequenceField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Group
        Inherits MarshalByRefObject
        
        Private strGroupNameField As String
        
        Private strGroupProfileField As String
        
        Private nJobIdField As Integer
        
        Private groupMembersField() As GroupMember
        
        '''<remarks/>
        Public Property strGroupName() As String
            Get
                Return Me.strGroupNameField
            End Get
            Set
                Me.strGroupNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strGroupProfile() As String
            Get
                Return Me.strGroupProfileField
            End Get
            Set
                Me.strGroupProfileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nJobId() As Integer
            Get
                Return Me.nJobIdField
            End Get
            Set
                Me.nJobIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GroupMembers() As GroupMember()
            Get
                Return Me.groupMembersField
            End Get
            Set
                Me.groupMembersField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Department
        Inherits MarshalByRefObject
        
        Private strDepartmentNameField As String
        
        Private strDepartmentIDField As String
        
        '''<remarks/>
        Public Property strDepartmentName() As String
            Get
                Return Me.strDepartmentNameField
            End Get
            Set
                Me.strDepartmentNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strDepartmentID() As String
            Get
                Return Me.strDepartmentIDField
            End Get
            Set
                Me.strDepartmentIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAssociatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssociatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssociatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUser() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDepartmentJobFunctionGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentJobFunctionGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentJobFunctionGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strDeptJobFnGpsArr() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDepartmentMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUser() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSubDepartmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubDepartmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubDepartmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objSubDepts() As Department()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Department())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GroupIsMemberOfGroup2CompletedEventHandler(ByVal sender As Object, ByVal e As GroupIsMemberOfGroup2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GroupIsMemberOfGroup2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GroupIsMemberOfGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GroupIsMemberOfGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GroupIsMemberOfGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FindDepartmentCompletedEventHandler(ByVal sender As Object, ByVal e As FindDepartmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDepartmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objDept() As Department
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Department)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FindUserCompletedEventHandler(ByVal sender As Object, ByVal e As FindUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUser() As User
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAllOCMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllOCMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllOCMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUserList() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDepartmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objDeptList() As Department()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Department())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objGroup() As Group
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Group)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupNamesCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strGroupArr() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetJobFunctionGroupMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobFunctionGroupMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobFunctionGroupMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UserList() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTopLevelDepartmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTopLevelDepartmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTopLevelDepartmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objDepList() As Department()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Department())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub VerifyUserCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignAllCurrentTasksCompletedEventHandler(ByVal sender As Object, ByVal e As AssignAllCurrentTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignAllCurrentTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignAllFutureTasksCompletedEventHandler(ByVal sender As Object, ByVal e As AssignAllFutureTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignAllFutureTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDepartmentCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strDepartment() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetExactCaseUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetExactCaseUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExactCaseUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strExactUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetManagerCompletedEventHandler(ByVal sender As Object, ByVal e As GetManagerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManagerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strManager() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOCSubOrdinatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetOCSubOrdinatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOCSubOrdinatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lstSubOrdinates() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSubOrdinatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubOrdinatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubOrdinatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objSubOrdinatesArr() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSubOrdinatesBySupervisorCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubOrdinatesBySupervisorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubOrdinatesBySupervisorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objSubOrdinatesArr() As User()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),User())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSupervisorCompletedEventHandler(ByVal sender As Object, ByVal e As GetSupervisorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSupervisorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strSupervisor() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSupervisorFunctionCompletedEventHandler(ByVal sender As Object, ByVal e As GetSupervisorFunctionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSupervisorFunctionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strCodeSupervisor() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strNameSupervisor() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskListViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskListViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskListViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property tasklistViewObj() As TasklistView
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),TasklistView)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserPrefsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserPrefsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserPrefsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUserPrefs() As UserPreferences
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),UserPreferences)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserRightsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserRightsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserRightsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property intlRights() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetViewListCompletedEventHandler(ByVal sender As Object, ByVal e As GetViewListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetViewListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property listOfViews() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UserIsMemberOfGroupCompletedEventHandler(ByVal sender As Object, ByVal e As UserIsMemberOfGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserIsMemberOfGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SetUserPrefsCompletedEventHandler(ByVal sender As Object, ByVal e As SetUserPrefsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserPrefsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AbortIncidentCompletedEventHandler(ByVal sender As Object, ByVal e As AbortIncidentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortIncidentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AbortStepCompletedEventHandler(ByVal sender As Object, ByVal e As AbortStepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortStepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DeleteIncidentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteIncidentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteIncidentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DirectActivateStepCompletedEventHandler(ByVal sender As Object, ByVal e As DirectActivateStepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DirectActivateStepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DirectActivateStepExCompletedEventHandler(ByVal sender As Object, ByVal e As DirectActivateStepExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DirectActivateStepExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objPrevTask() As Task
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Task)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetIncidentStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetIncidentStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIncidentStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oarrListStepStatus() As structStepStatus()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structStepStatus())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGraphicalStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetGraphicalStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGraphicalStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property bytesGif() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AbortTaskIdCompletedEventHandler(ByVal sender As Object, ByVal e As AbortTaskIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortTaskIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AbortCompletedEventHandler(ByVal sender As Object, ByVal e As AbortCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ReturnTaskCompletedEventHandler(ByVal sender As Object, ByVal e As ReturnTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReturnTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVariableList() As Variable()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Variable())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GetTasksCount() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignQueueTaskCompletedEventHandler(ByVal sender As Object, ByVal e As AssignQueueTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignQueueTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAssignedUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignTaskCompletedEventHandler(ByVal sender As Object, ByVal e As AssignTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignTaskAssignedToUserCompletedEventHandler(ByVal sender As Object, ByVal e As AssignTaskAssignedToUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignTaskAssignedToUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAssignedToUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DeleteTaskCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ExtractFormURLCompletedEventHandler(ByVal sender As Object, ByVal e As ExtractFormURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExtractFormURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strURL() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAllTaskVariablesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTaskVariablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTaskVariablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ListVars() As Variable()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Variable())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAtCompletedEventHandler(ByVal sender As Object, ByVal e As GetAtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetFirstTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetFirstTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFirstTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetNextTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPrevTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrevTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrevTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTasksCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetTasksCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTasksCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intCountTask() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadAssignedTasksCompletedEventHandler(ByVal sender As Object, ByVal e As LoadAssignedTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadAssignedTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadFilteredTasksCompletedEventHandler(ByVal sender As Object, ByVal e As LoadFilteredTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadFilteredTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objTaskListRef() As Tasklist
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Tasklist)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadQueueTasksCompletedEventHandler(ByVal sender As Object, ByVal e As LoadQueueTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadQueueTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadViewTasksCompletedEventHandler(ByVal sender As Object, ByVal e As LoadViewTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadViewTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oListTasks() As structListTask()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structListTask())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignAllFutureTaskCompletedEventHandler(ByVal sender As Object, ByVal e As AssignAllFutureTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignAllFutureTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AssignallCurrtaskCompletedEventHandler(ByVal sender As Object, ByVal e As AssignallCurrtaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignallCurrtaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetReassignedTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetReassignedTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReassignedTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strUserOld() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetReassignedTask2CompletedEventHandler(ByVal sender As Object, ByVal e As GetReassignedTask2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReassignedTask2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strUserOld() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDatosUltimusIrResolucionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosUltimusIrResolucionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosUltimusIrResolucionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDatosUltimusNivActualAprobCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosUltimusNivActualAprobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosUltimusNivActualAprobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDatosUltimusComiteCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosUltimusComiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosUltimusComiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDatosSupervisorCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosSupervisorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosSupervisorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pstructGroupMembers() As structGroupMembers()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),structGroupMembers())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetDatosUltimusActualCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatosUltimusActualCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatosUltimusActualCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
