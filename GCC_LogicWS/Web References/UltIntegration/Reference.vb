'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
'
Namespace UltIntegration
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UltIntegrationSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Variable())),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class UltIntegration
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetLaunchInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LaunchProcessIncidentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReturnTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskStepNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTaskVariablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskVariableValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskRangeVariableValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecificTaskVariablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUltimusTaskIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInitiateTaskInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveTaskInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserEmailAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobFunctionGroupUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubordinateUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoByJobTitleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssociatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.GCC.LogicWS.My.MySettings.Default.GCC_LogicWS_UltIntegration_UltIntegration
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetLaunchInformationCompleted As GetLaunchInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event LaunchProcessIncidentCompleted As LaunchProcessIncidentCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitTaskCompleted As SubmitTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event ReturnTaskCompleted As ReturnTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskStepNameCompleted As GetTaskStepNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskInfoCompleted As GetTaskInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskStatusCompleted As GetTaskStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTaskVariablesCompleted As GetAllTaskVariablesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskVariableValueCompleted As GetTaskVariableValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskRangeVariableValuesCompleted As GetTaskRangeVariableValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecificTaskVariablesCompleted As GetSpecificTaskVariablesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUltimusTaskIDCompleted As GetUltimusTaskIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInitiateTaskInfoCompleted As GetInitiateTaskInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveTaskInfoCompleted As GetActiveTaskInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserEmailAddressCompleted As GetUserEmailAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobFunctionGroupUsersCompleted As GetJobFunctionGroupUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubordinateUsersCompleted As GetSubordinateUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoByJobTitleCompleted As GetUserInfoByJobTitleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssociatesCompleted As GetAssociatesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLaunchInformation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLaunchInformation(ByVal strProcessName As String, ByVal strUserName As String, ByRef objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLaunchInformation", New Object() {strProcessName, strUserName})
            objVarList = CType(results(1),Variable())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLaunchInformationAsync(ByVal strProcessName As String, ByVal strUserName As String)
            Me.GetLaunchInformationAsync(strProcessName, strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLaunchInformationAsync(ByVal strProcessName As String, ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetLaunchInformationOperationCompleted Is Nothing) Then
                Me.GetLaunchInformationOperationCompleted = AddressOf Me.OnGetLaunchInformationOperationCompleted
            End If
            Me.InvokeAsync("GetLaunchInformation", New Object() {strProcessName, strUserName}, Me.GetLaunchInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLaunchInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLaunchInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLaunchInformationCompleted(Me, New GetLaunchInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LaunchProcessIncident", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LaunchProcessIncident(ByVal strProcessName As String, ByVal strUserName As String, ByVal strSummary As String, ByRef nIncidentNumber As Integer, ByVal objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("LaunchProcessIncident", New Object() {strProcessName, strUserName, strSummary, nIncidentNumber, objVarList})
            nIncidentNumber = CType(results(1),Integer)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LaunchProcessIncidentAsync(ByVal strProcessName As String, ByVal strUserName As String, ByVal strSummary As String, ByVal nIncidentNumber As Integer, ByVal objVarList() As Variable)
            Me.LaunchProcessIncidentAsync(strProcessName, strUserName, strSummary, nIncidentNumber, objVarList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LaunchProcessIncidentAsync(ByVal strProcessName As String, ByVal strUserName As String, ByVal strSummary As String, ByVal nIncidentNumber As Integer, ByVal objVarList() As Variable, ByVal userState As Object)
            If (Me.LaunchProcessIncidentOperationCompleted Is Nothing) Then
                Me.LaunchProcessIncidentOperationCompleted = AddressOf Me.OnLaunchProcessIncidentOperationCompleted
            End If
            Me.InvokeAsync("LaunchProcessIncident", New Object() {strProcessName, strUserName, strSummary, nIncidentNumber, objVarList}, Me.LaunchProcessIncidentOperationCompleted, userState)
        End Sub
        
        Private Sub OnLaunchProcessIncidentOperationCompleted(ByVal arg As Object)
            If (Not (Me.LaunchProcessIncidentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LaunchProcessIncidentCompleted(Me, New LaunchProcessIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitTask(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByRef nIncidentNumber As Integer, ByVal objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SubmitTask", New Object() {strTaskID, strUserName, strSummary, nIncidentNumber, objVarList})
            nIncidentNumber = CType(results(1),Integer)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitTaskAsync(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByVal nIncidentNumber As Integer, ByVal objVarList() As Variable)
            Me.SubmitTaskAsync(strTaskID, strUserName, strSummary, nIncidentNumber, objVarList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitTaskAsync(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByVal nIncidentNumber As Integer, ByVal objVarList() As Variable, ByVal userState As Object)
            If (Me.SubmitTaskOperationCompleted Is Nothing) Then
                Me.SubmitTaskOperationCompleted = AddressOf Me.OnSubmitTaskOperationCompleted
            End If
            Me.InvokeAsync("SubmitTask", New Object() {strTaskID, strUserName, strSummary, nIncidentNumber, objVarList}, Me.SubmitTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitTaskCompleted(Me, New SubmitTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReturnTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReturnTask(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByVal objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ReturnTask", New Object() {strTaskID, strUserName, strSummary, objVarList})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReturnTaskAsync(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByVal objVarList() As Variable)
            Me.ReturnTaskAsync(strTaskID, strUserName, strSummary, objVarList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReturnTaskAsync(ByVal strTaskID As String, ByVal strUserName As String, ByVal strSummary As String, ByVal objVarList() As Variable, ByVal userState As Object)
            If (Me.ReturnTaskOperationCompleted Is Nothing) Then
                Me.ReturnTaskOperationCompleted = AddressOf Me.OnReturnTaskOperationCompleted
            End If
            Me.InvokeAsync("ReturnTask", New Object() {strTaskID, strUserName, strSummary, objVarList}, Me.ReturnTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnReturnTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReturnTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReturnTaskCompleted(Me, New ReturnTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskStepName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskStepName(ByVal strTaskID As String, ByRef strTaskStepName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskStepName", New Object() {strTaskID})
            strTaskStepName = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskStepNameAsync(ByVal strTaskID As String)
            Me.GetTaskStepNameAsync(strTaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskStepNameAsync(ByVal strTaskID As String, ByVal userState As Object)
            If (Me.GetTaskStepNameOperationCompleted Is Nothing) Then
                Me.GetTaskStepNameOperationCompleted = AddressOf Me.OnGetTaskStepNameOperationCompleted
            End If
            Me.InvokeAsync("GetTaskStepName", New Object() {strTaskID}, Me.GetTaskStepNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskStepNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskStepNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskStepNameCompleted(Me, New GetTaskStepNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskInfo(ByVal strTaskID As String, ByRef objTaskInfo As TaskInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskInfo", New Object() {strTaskID})
            objTaskInfo = CType(results(1),TaskInfo)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskInfoAsync(ByVal strTaskID As String)
            Me.GetTaskInfoAsync(strTaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskInfoAsync(ByVal strTaskID As String, ByVal userState As Object)
            If (Me.GetTaskInfoOperationCompleted Is Nothing) Then
                Me.GetTaskInfoOperationCompleted = AddressOf Me.OnGetTaskInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTaskInfo", New Object() {strTaskID}, Me.GetTaskInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskInfoCompleted(Me, New GetTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskStatus(ByVal strTaskID As String, ByRef strTaskStatus As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskStatus", New Object() {strTaskID})
            strTaskStatus = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskStatusAsync(ByVal strTaskID As String)
            Me.GetTaskStatusAsync(strTaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskStatusAsync(ByVal strTaskID As String, ByVal userState As Object)
            If (Me.GetTaskStatusOperationCompleted Is Nothing) Then
                Me.GetTaskStatusOperationCompleted = AddressOf Me.OnGetTaskStatusOperationCompleted
            End If
            Me.InvokeAsync("GetTaskStatus", New Object() {strTaskID}, Me.GetTaskStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskStatusCompleted(Me, New GetTaskStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTaskVariables", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTaskVariables(ByVal strTaskID As String, ByRef objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllTaskVariables", New Object() {strTaskID})
            objVarList = CType(results(1),Variable())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTaskVariablesAsync(ByVal strTaskID As String)
            Me.GetAllTaskVariablesAsync(strTaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTaskVariablesAsync(ByVal strTaskID As String, ByVal userState As Object)
            If (Me.GetAllTaskVariablesOperationCompleted Is Nothing) Then
                Me.GetAllTaskVariablesOperationCompleted = AddressOf Me.OnGetAllTaskVariablesOperationCompleted
            End If
            Me.InvokeAsync("GetAllTaskVariables", New Object() {strTaskID}, Me.GetAllTaskVariablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTaskVariablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTaskVariablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTaskVariablesCompleted(Me, New GetAllTaskVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskVariableValue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskVariableValue(ByVal strTaskID As String, ByVal strVariableName As String, ByRef objVariableValue As Object, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskVariableValue", New Object() {strTaskID, strVariableName})
            objVariableValue = CType(results(1),Object)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskVariableValueAsync(ByVal strTaskID As String, ByVal strVariableName As String)
            Me.GetTaskVariableValueAsync(strTaskID, strVariableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskVariableValueAsync(ByVal strTaskID As String, ByVal strVariableName As String, ByVal userState As Object)
            If (Me.GetTaskVariableValueOperationCompleted Is Nothing) Then
                Me.GetTaskVariableValueOperationCompleted = AddressOf Me.OnGetTaskVariableValueOperationCompleted
            End If
            Me.InvokeAsync("GetTaskVariableValue", New Object() {strTaskID, strVariableName}, Me.GetTaskVariableValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskVariableValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskVariableValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskVariableValueCompleted(Me, New GetTaskVariableValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskRangeVariableValues", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskRangeVariableValues(ByVal strTaskID As String, ByVal strVariableName As String, ByRef objVariableValues() As Object, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTaskRangeVariableValues", New Object() {strTaskID, strVariableName})
            objVariableValues = CType(results(1),Object())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskRangeVariableValuesAsync(ByVal strTaskID As String, ByVal strVariableName As String)
            Me.GetTaskRangeVariableValuesAsync(strTaskID, strVariableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskRangeVariableValuesAsync(ByVal strTaskID As String, ByVal strVariableName As String, ByVal userState As Object)
            If (Me.GetTaskRangeVariableValuesOperationCompleted Is Nothing) Then
                Me.GetTaskRangeVariableValuesOperationCompleted = AddressOf Me.OnGetTaskRangeVariableValuesOperationCompleted
            End If
            Me.InvokeAsync("GetTaskRangeVariableValues", New Object() {strTaskID, strVariableName}, Me.GetTaskRangeVariableValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskRangeVariableValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskRangeVariableValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskRangeVariableValuesCompleted(Me, New GetTaskRangeVariableValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSpecificTaskVariables", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecificTaskVariables(ByVal strTaskID As String, ByVal strVariableNames() As String, ByRef objVarList() As Variable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSpecificTaskVariables", New Object() {strTaskID, strVariableNames})
            objVarList = CType(results(1),Variable())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecificTaskVariablesAsync(ByVal strTaskID As String, ByVal strVariableNames() As String)
            Me.GetSpecificTaskVariablesAsync(strTaskID, strVariableNames, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecificTaskVariablesAsync(ByVal strTaskID As String, ByVal strVariableNames() As String, ByVal userState As Object)
            If (Me.GetSpecificTaskVariablesOperationCompleted Is Nothing) Then
                Me.GetSpecificTaskVariablesOperationCompleted = AddressOf Me.OnGetSpecificTaskVariablesOperationCompleted
            End If
            Me.InvokeAsync("GetSpecificTaskVariables", New Object() {strTaskID, strVariableNames}, Me.GetSpecificTaskVariablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecificTaskVariablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecificTaskVariablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecificTaskVariablesCompleted(Me, New GetSpecificTaskVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUltimusTaskID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUltimusTaskID(ByVal strProcessName As String, ByVal nIncidentNo As Integer, ByVal strStepLabel As String, ByRef strTaskID As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUltimusTaskID", New Object() {strProcessName, nIncidentNo, strStepLabel})
            strTaskID = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUltimusTaskIDAsync(ByVal strProcessName As String, ByVal nIncidentNo As Integer, ByVal strStepLabel As String)
            Me.GetUltimusTaskIDAsync(strProcessName, nIncidentNo, strStepLabel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUltimusTaskIDAsync(ByVal strProcessName As String, ByVal nIncidentNo As Integer, ByVal strStepLabel As String, ByVal userState As Object)
            If (Me.GetUltimusTaskIDOperationCompleted Is Nothing) Then
                Me.GetUltimusTaskIDOperationCompleted = AddressOf Me.OnGetUltimusTaskIDOperationCompleted
            End If
            Me.InvokeAsync("GetUltimusTaskID", New Object() {strProcessName, nIncidentNo, strStepLabel}, Me.GetUltimusTaskIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUltimusTaskIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUltimusTaskIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUltimusTaskIDCompleted(Me, New GetUltimusTaskIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInitiateTaskInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInitiateTaskInfo(ByVal strProcessName As String, ByVal strUserName As String, ByRef objTaskInfo As TaskInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInitiateTaskInfo", New Object() {strProcessName, strUserName})
            objTaskInfo = CType(results(1),TaskInfo)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInitiateTaskInfoAsync(ByVal strProcessName As String, ByVal strUserName As String)
            Me.GetInitiateTaskInfoAsync(strProcessName, strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInitiateTaskInfoAsync(ByVal strProcessName As String, ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetInitiateTaskInfoOperationCompleted Is Nothing) Then
                Me.GetInitiateTaskInfoOperationCompleted = AddressOf Me.OnGetInitiateTaskInfoOperationCompleted
            End If
            Me.InvokeAsync("GetInitiateTaskInfo", New Object() {strProcessName, strUserName}, Me.GetInitiateTaskInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInitiateTaskInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInitiateTaskInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInitiateTaskInfoCompleted(Me, New GetInitiateTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveTaskInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveTaskInfo(ByVal strProcessName As String, ByVal strUserName As String, ByRef objArrTaskInfo() As TaskInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetActiveTaskInfo", New Object() {strProcessName, strUserName})
            objArrTaskInfo = CType(results(1),TaskInfo())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveTaskInfoAsync(ByVal strProcessName As String, ByVal strUserName As String)
            Me.GetActiveTaskInfoAsync(strProcessName, strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveTaskInfoAsync(ByVal strProcessName As String, ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetActiveTaskInfoOperationCompleted Is Nothing) Then
                Me.GetActiveTaskInfoOperationCompleted = AddressOf Me.OnGetActiveTaskInfoOperationCompleted
            End If
            Me.InvokeAsync("GetActiveTaskInfo", New Object() {strProcessName, strUserName}, Me.GetActiveTaskInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveTaskInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveTaskInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveTaskInfoCompleted(Me, New GetActiveTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserEmailAddress", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserEmailAddress(ByVal strUserName As String, ByRef strEmailAddress As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserEmailAddress", New Object() {strUserName})
            strEmailAddress = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserEmailAddressAsync(ByVal strUserName As String)
            Me.GetUserEmailAddressAsync(strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserEmailAddressAsync(ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetUserEmailAddressOperationCompleted Is Nothing) Then
                Me.GetUserEmailAddressOperationCompleted = AddressOf Me.OnGetUserEmailAddressOperationCompleted
            End If
            Me.InvokeAsync("GetUserEmailAddress", New Object() {strUserName}, Me.GetUserEmailAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserEmailAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserEmailAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserEmailAddressCompleted(Me, New GetUserEmailAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobFunctionGroupUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobFunctionGroupUsers(ByVal strJobFunctionGroupName As String, ByRef arrObjUserInfo() As UserInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetJobFunctionGroupUsers", New Object() {strJobFunctionGroupName})
            arrObjUserInfo = CType(results(1),UserInfo())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobFunctionGroupUsersAsync(ByVal strJobFunctionGroupName As String)
            Me.GetJobFunctionGroupUsersAsync(strJobFunctionGroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobFunctionGroupUsersAsync(ByVal strJobFunctionGroupName As String, ByVal userState As Object)
            If (Me.GetJobFunctionGroupUsersOperationCompleted Is Nothing) Then
                Me.GetJobFunctionGroupUsersOperationCompleted = AddressOf Me.OnGetJobFunctionGroupUsersOperationCompleted
            End If
            Me.InvokeAsync("GetJobFunctionGroupUsers", New Object() {strJobFunctionGroupName}, Me.GetJobFunctionGroupUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobFunctionGroupUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobFunctionGroupUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobFunctionGroupUsersCompleted(Me, New GetJobFunctionGroupUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubordinateUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubordinateUsers(ByVal strDepartmentName As String, ByVal strUserName As String, ByRef arrObjUserInfo() As UserInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubordinateUsers", New Object() {strDepartmentName, strUserName})
            arrObjUserInfo = CType(results(1),UserInfo())
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubordinateUsersAsync(ByVal strDepartmentName As String, ByVal strUserName As String)
            Me.GetSubordinateUsersAsync(strDepartmentName, strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubordinateUsersAsync(ByVal strDepartmentName As String, ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetSubordinateUsersOperationCompleted Is Nothing) Then
                Me.GetSubordinateUsersOperationCompleted = AddressOf Me.OnGetSubordinateUsersOperationCompleted
            End If
            Me.InvokeAsync("GetSubordinateUsers", New Object() {strDepartmentName, strUserName}, Me.GetSubordinateUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubordinateUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubordinateUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubordinateUsersCompleted(Me, New GetSubordinateUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInfoByJobTitle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfoByJobTitle(ByVal strDepartmentName As String, ByVal strJobTitle As String, ByRef objUserInfo As UserInfo, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserInfoByJobTitle", New Object() {strDepartmentName, strJobTitle})
            objUserInfo = CType(results(1),UserInfo)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoByJobTitleAsync(ByVal strDepartmentName As String, ByVal strJobTitle As String)
            Me.GetUserInfoByJobTitleAsync(strDepartmentName, strJobTitle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoByJobTitleAsync(ByVal strDepartmentName As String, ByVal strJobTitle As String, ByVal userState As Object)
            If (Me.GetUserInfoByJobTitleOperationCompleted Is Nothing) Then
                Me.GetUserInfoByJobTitleOperationCompleted = AddressOf Me.OnGetUserInfoByJobTitleOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfoByJobTitle", New Object() {strDepartmentName, strJobTitle}, Me.GetUserInfoByJobTitleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoByJobTitleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoByJobTitleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoByJobTitleCompleted(Me, New GetUserInfoByJobTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssociates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssociates(ByVal strUserName As String, ByRef UsersNameAssociates As String, ByRef FullNameAssociates As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAssociates", New Object() {strUserName})
            UsersNameAssociates = CType(results(1),String)
            FullNameAssociates = CType(results(2),String)
            strError = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssociatesAsync(ByVal strUserName As String)
            Me.GetAssociatesAsync(strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssociatesAsync(ByVal strUserName As String, ByVal userState As Object)
            If (Me.GetAssociatesOperationCompleted Is Nothing) Then
                Me.GetAssociatesOperationCompleted = AddressOf Me.OnGetAssociatesOperationCompleted
            End If
            Me.InvokeAsync("GetAssociates", New Object() {strUserName}, Me.GetAssociatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssociatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssociatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssociatesCompleted(Me, New GetAssociatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Variable
        Inherits MarshalByRefObject
        
        Private strVariableNameField As String
        
        Private objVariableValueField() As Object
        
        '''<remarks/>
        Public Property strVariableName() As String
            Get
                Return Me.strVariableNameField
            End Get
            Set
                Me.strVariableNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property objVariableValue() As Object()
            Get
                Return Me.objVariableValueField
            End Get
            Set
                Me.objVariableValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class UserInfo
        
        Private strUserNameField As String
        
        Private strFullNameField As String
        
        Private strJobFunctionField As String
        
        Private strEmailAddressField As String
        
        '''<remarks/>
        Public Property strUserName() As String
            Get
                Return Me.strUserNameField
            End Get
            Set
                Me.strUserNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strFullName() As String
            Get
                Return Me.strFullNameField
            End Get
            Set
                Me.strFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strJobFunction() As String
            Get
                Return Me.strJobFunctionField
            End Get
            Set
                Me.strJobFunctionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strEmailAddress() As String
            Get
                Return Me.strEmailAddressField
            End Get
            Set
                Me.strEmailAddressField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TaskInfo
        
        Private strTaskIDField As String
        
        Private strStepNameField As String
        
        Private strProcessNameField As String
        
        Private strAssignedUserIDField As String
        
        Private strSummaryField As String
        
        Private nIncidentNumberField As Integer
        
        Private dStartTimeField As Double
        
        Private sFullNameField As String
        
        Private dEndTimeField As Double
        
        '''<remarks/>
        Public Property strTaskID() As String
            Get
                Return Me.strTaskIDField
            End Get
            Set
                Me.strTaskIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strStepName() As String
            Get
                Return Me.strStepNameField
            End Get
            Set
                Me.strStepNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strProcessName() As String
            Get
                Return Me.strProcessNameField
            End Get
            Set
                Me.strProcessNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strAssignedUserID() As String
            Get
                Return Me.strAssignedUserIDField
            End Get
            Set
                Me.strAssignedUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strSummary() As String
            Get
                Return Me.strSummaryField
            End Get
            Set
                Me.strSummaryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nIncidentNumber() As Integer
            Get
                Return Me.nIncidentNumberField
            End Get
            Set
                Me.nIncidentNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dStartTime() As Double
            Get
                Return Me.dStartTimeField
            End Get
            Set
                Me.dStartTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sFullName() As String
            Get
                Return Me.sFullNameField
            End Get
            Set
                Me.sFullNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dEndTime() As Double
            Get
                Return Me.dEndTimeField
            End Get
            Set
                Me.dEndTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Variable)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetLaunchInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetLaunchInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLaunchInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVarList() As Variable()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Variable())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LaunchProcessIncidentCompletedEventHandler(ByVal sender As Object, ByVal e As LaunchProcessIncidentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LaunchProcessIncidentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nIncidentNumber() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SubmitTaskCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nIncidentNumber() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ReturnTaskCompletedEventHandler(ByVal sender As Object, ByVal e As ReturnTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReturnTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskStepNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskStepNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskStepNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTaskStepName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objTaskInfo() As TaskInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),TaskInfo)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTaskStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAllTaskVariablesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTaskVariablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTaskVariablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVarList() As Variable()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Variable())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskVariableValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskVariableValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskVariableValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVariableValue() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskRangeVariableValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskRangeVariableValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskRangeVariableValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVariableValues() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSpecificTaskVariablesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecificTaskVariablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecificTaskVariablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objVarList() As Variable()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Variable())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUltimusTaskIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUltimusTaskIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUltimusTaskIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTaskID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetInitiateTaskInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetInitiateTaskInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInitiateTaskInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objTaskInfo() As TaskInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),TaskInfo)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetActiveTaskInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveTaskInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveTaskInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objArrTaskInfo() As TaskInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),TaskInfo())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserEmailAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserEmailAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserEmailAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strEmailAddress() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetJobFunctionGroupUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobFunctionGroupUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobFunctionGroupUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property arrObjUserInfo() As UserInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),UserInfo())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSubordinateUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubordinateUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubordinateUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property arrObjUserInfo() As UserInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),UserInfo())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserInfoByJobTitleCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoByJobTitleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoByJobTitleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objUserInfo() As UserInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),UserInfo)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAssociatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssociatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssociatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UsersNameAssociates() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FullNameAssociates() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
End Namespace
